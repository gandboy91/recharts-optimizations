{"version":3,"sources":["theme.js","constants/graphs.js","helpers/common.js","helpers/data.js","components/ProbabilityDistribution/CustomTooltip/styles.js","components/ProbabilityDistribution/CustomTooltip/index.js","components/ProbabilityDistribution/index.js","components/graphs/LevelsAxis/styles.js","components/graphs/LevelsAxis/index.js","components/graphs/GraphLevelSelect/styles.js","components/graphs/GraphLevelSelect/index.js","helpers/camelizer.js","constants/regexp.js","helpers/apd.js","components/ApdOld/styles.js","components/ApdOld/ParamsLegend/index.js","components/ApdOld/index.js","constants/errors.js","mocks/apd.js","components/SvgLevelSelect/styles.js","components/SvgLevelSelect/index.js","components/CustomLevelsBar/index.js","components/SvgParametersBlock/index.js","components/CustomParametersBlock/index.js","hooks/useRangeSelect.js","components/SvgTooltip/index.js","constants/common.js","components/BarChartWithRangeSelection/index.js","components/AnalyticalProbabilityDistribution/styles.js","components/AnalyticalProbabilityDistribution/index.js","hooks/useUniqueId.js","App.js","helpers/graphs/common.js","serviceWorker.js","index.js"],"names":["palette","white","main","black","primary","light","middle","secondary","error","danger","lightGrey","sandy","grey","lightBlue","blue","deep","dark","graph","green","links","lightGreen","statuses","pending","running","finished","cancelled","failed","deepBlueColorRange","linearColorRange","redToGreenRange","graphLines","red","typography","fontFamily","join","theme","createMuiTheme","defaultTransition","navbarHeight","baseSideBarWidth","projectMenuHeight","dashboardToolbarHeight","zIndexMap","zIndexNavBar","zIndexMax","APD_GRAPH_VALUABLE_PARAMS","APD_GRAPH_EXTRA_PARAMS","param","title","APD_HINT_BY_MODE","ALTITUDE_TYPE","DEPTH_TYPE","STATS_API_UNITS_TO_COMMON_UNITS","degrees","degree","getMinMax","a","b","inRange","value","start","end","isNullOrUndefined","cyclicSequence","sequence","Array","isArray","Error","generator","recursiveGenerator","next","floatRound","precision","factor","Math","round","getPrettyNumber","preparedValue","parseFloat","toFixed","useStyles","makeStyles","container","backgroundColor","padding","opacity","color","CustomTooltip","active","xLabel","xFrom","xTo","yValue","yLabel","mode","classes","hintText","className","some","xFormatter","yFormatter","ProbabilityDistribution","graphData","widthGraph","heightGraph","xlabel","yTicks","maxYValue","ylabel","useState","hoverColumn","setHoverColumn","setMode","selectedCols","setSelectedCols","getColorBar","useCallback","idx","selectionColor","onMouseAction","event","activeTooltipIndex","onMouseLeave","onClick","getOccurence","gy","min","max","reduce","range","result","i","getRange","gx","length","width","height","data","barCategoryGap","onMouseMove","onMouseEnter","tick","fontSize","label","position","offset","ticks","domain","angle","strokeDasharray","dataKey","args","console","log","map","item","index","cursor","key","fill","content","root","left","top","up","overflowLength","LevelsAxis","fullLength","id","viewBox","refX","refY","markerWidth","markerHeight","orient","stroke","d","x1","y1","x2","y2","strokeWidth","markerEnd","defaultProps","memo","zIndex","lineHeight","isLongMode","borderLeft","levelContainer","background","borderTop","borderRight","marginRight","level","flex","tickContainer","lastLevelContainer","borderBottom","currentLevel","currentLevelLabel","fontWeight","titleContainer","transform","axisContainer","levelButton","outline","margin","GraphLevelSelect","levels","type","selectLevel","heightFromProps","amount","true","isReversed","onClickLevel","currentTarget","getAttribute","levelIndex","preparedLevels","useMemo","roundedLevels","reverse","lastIndex","selectedIndex","Grid","direction","justify","alignItems","xs","data-html2canvas-ignore","wrap","classNames","tabIndex","aria-label","role","data-index","camelizeBoth","objectToCamelize","Object","entries","acc","humps","STATS_TEMPLATE_VARIABLE_REGEXP","getPreparedApdExtraParams","rawGraphData","paramPath","get","push","name","Number","isNaN","paramsContainer","marginLeft","ParamElement","ParamsLegend","params","ApdOld","yTickStep","setCurrentLevel","rawGraphParams","pick","yName","xName","xValues","yValues","minYValue","floor","extraParams","isFinite","getPreparedGraphData","analyticalProbabilityDistributionGraphData","point","layer","variables","units","hidden","longName","names","visualization","driver","suffix","method","fileformat","path","web","dataLegend0","kwargs","annotate","grid","periodicity","scaleParameter","attributes","standard_name","level_dependent","description","long_name","vartype","dimensions","values","locationParameter","global_attributes","statistic","history","location_name","longitude","latitude","srs","period","WIND_dataset","WIND_node_longitude","WIND_node_latitude","WIND_node_distance","sampling_period","depth","shapeParameter","conventions","law","magwPdf","valid_max","valid_min","magwBin","success","rect","fade","LINES_COLOR","RECT_FILL","SELECTED_RECT_FILL","SvgLevelSelect","selectedLevel","onSelect","xOffset","yOffset","axisOverflow","lineX","heightFull","arrowStartY","pathArrow","ARROW_WIDTH","axisY1","axisY2","arrowPath","fullHeight","labelX","labelY","axisX","tickX","rectHeight","rectStartY","tickFontSize","x","y","textAnchor","dominantBaseline","rectY","Fragment","CustomLevelsBar","barWidth","yAxisMap","outerRadius","cx","cy","isPolarCoords","yStart","SvgParametersBlock","parameters","offsetY","dy","CustomParametersBlock","xAxisMap","blockWidth","leftOffset","xAxisStart","canvasWidth","yAxisStart","INITIAL_RANGE","MODE_SEQUENCE","SvgTooltip","lines","limits","widthUpdater","fillOpacity","defaultPosition","textRef","useRef","containerWidth","setContainerWidth","useEffect","maxLineWidth","current","childNodes","forEach","node","currentWidth","getComputedTextLength","containerHeight","maxX","maxY","xPosition","yPosition","containerX","containerY","textX","textY","rx","ry","ref","textLength","text","bold","wide","letterSpacing","React","BAND_FILL","BAND_STROKE","getRangeTextForTooltip","from","to","BarChartWithRangeSelection","orderedTooltipTicks","tooltipAxisBandSize","graphContainer","tooltipTitle","xUnits","tooltipY","setTooltipY","onEnter","onRangeLeave","setRange","nextMode","onItemEnter","onItemClick","newMode","onLeave","handleEnter","handleClick","handleRangeLeave","useRangeSelect","graphY","getBoundingClientRect","clientY","yAxisHeight","yTickValues","niceTicks","xAxisWidth","yMaxTickHeight","yMaxTickValue","scaleDivision","bandWidth","tooltipLimits","isSelectMode","showTooltip","xValue","occurrence","occurence","getOccurrenceByRange","tooltipX","coordinate","indexInRange","rectangleClass","band","hoverable","selectRange","selectedRange","whiteSpace","graphWrapper","overflow","GRAPH_MARGIN","CANVAS_OFFSET","right","bottom","AnalyticalProbabilityDistribution","annualData","graphWidth","salt","projectId","statsIds","pngFileName","uniqueId","graphHeight","hasLevels","currentData","withLevelsSelect","lodashRange","chartMargin","chartWidth","chartHeight","Typography","variant","align","component","annualApdData","statsId","xValuesParams","yValuesParams","replace","trim","getTitleFromRawGraphData","substring","keys","xValuesByLevel","yValuesByLevel","levelTitleAddition","levelType","includes","ucFirstLevelType","toUpperCase","slice","preparedString","getTitleAdditionByLevelType","preparedTitle","getPreparedAnalyticalProbabilityGraphData","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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a,gDACbpB,MAAO,IACPsB,QAAS,KACTJ,cAAe,kBAEjBK,WAAY,CAAC,SACbC,OAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,MAE/CkB,IAAK,CACHzB,WAAY,CACVG,YAAa,6BACbpB,MAAO,GACPsB,QAAS,KAEXC,WAAY,CAAC,QAAS,SACtBC,OAAQ,CACN,CAAC,WACD,CAAC,WACD,CAAC,WACD,CAAC,WACD,CAAC,WACD,CAAC,WACD,CAAC,WACD,CAAC,WACD,CAAC,aAGLmB,QAAS,CACP1B,WAAY,CACVC,cAAe,oCACfE,YAAa,+BACbwB,UAAW,OACXzB,gBAAiB,OACjBnB,MAAO,IACPqB,UAAW,2BACXwB,UAAW,KACXvB,QAAS,MAEXC,WAAY,CAAC,QAAS,YACtBC,OAAQ,CACN,CACE,qBACA,kBACA,mBACA,kBACA,mBACA,mBACA,mBACA,kBACA,mBACA,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,qBACA,qBACA,qBACA,sBACA,qBACA,sBACA,uBAEF,CACE,iBACA,kBACA,kBACA,kBACA,kBACA,kBACA,mBACA,mBACA,kBACA,mBACA,kBACA,mBACA,mBACA,mBACA,kBACA,mBACA,oBACA,oBACA,oBACA,oBACA,qBACA,qBACA,sBAEF,CACE,mBACA,kBACA,mBACA,mBACA,kBACA,kBACA,mBACA,kBACA,mBACA,mBACA,mBACA,kBACA,iBACA,kBACA,kBACA,kBACA,iBACA,mBACA,qBACA,sBACA,qBACA,sBACA,sBAEF,CACE,mBACA,kBACA,mBACA,mBACA,mBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,mBACA,mBACA,kBACA,kBACA,mBACA,mBACA,qBACA,qBACA,qBACA,uBAEF,CACE,kBACA,kBACA,mBACA,iBACA,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,kBACA,iBACA,kBACA,kBACA,kBACA,kBACA,mBACA,mBACA,oBACA,qBACA,sBACA,sBACA,sBAEF,CACE,mBACA,kBACA,mBACA,mBACA,kBACA,kBACA,kBACA,mBACA,kBACA,kBACA,mBACA,kBACA,kBACA,mBACA,kBACA,eACA,kBACA,mBACA,mBACA,qBACA,sBACA,qBACA,uBAEF,CACE,mBACA,kBACA,mBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,mBACA,mBACA,kBACA,kBACA,kBACA,kBACA,mBACA,mBACA,kBACA,kBACA,qBACA,qBACA,mBACA,qBAEF,CACE,mBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,kBACA,mBACA,kBACA,kBACA,kBACA,mBACA,iBACA,mBACA,oBACA,oBACA,qBACA,sBACA,uBAEF,CACE,mBACA,kBACA,kBACA,kBACA,kBACA,kBACA,iBACA,mBACA,mBACA,mBACA,mBACA,kBACA,mBACA,kBACA,mBACA,mBACA,kBACA,kBACA,mBACA,oBACA,oBACA,sBACA,wBAINsB,QAAS,CACP7B,WAAY,CACVG,YAAa,iCACbF,cAAe,YACflB,MAAO,QACPsB,QAAS,MAEXC,WAAY,CAAC,QAAS,YACtuB,SAAS,G,6BChoBEnP,GAAYC,aAAW,gBAAGjF,EAAH,EAAGA,QAAH,MAAkB,CACpDoU,KAAM,CACJvK,OAAQ,UACRiD,QAAS,OACT,UAAW,CACT/C,KAAMsK,aAAKrU,EAAQc,KAAKG,MAAO,UCM/BqT,GAActU,EAAQY,KAAKP,MAC3BkU,GAAYvU,EAAQc,KAAKG,MACzBuT,GAAqBxU,EAAQc,KAAKZ,KAqBlCuU,GAAiB,SAAC,GAUjB,IAAD,EATJxH,EASI,EATJA,OACAC,EAQI,EARJA,KACAwH,EAOI,EAPJA,cACAC,EAMI,EANJA,SACApM,EAKI,EALJA,MACQ6E,EAIJ,EAJJ5E,OACAoM,EAGI,EAHJA,QACAC,EAEI,EAFJA,QACAC,EACI,EADJA,aAEM/O,EAAUf,KACV2G,EAAasB,EAAO3E,OAtCH,GAuCjBE,GAAS,GACb8E,KAvCiB,KAsCJ,gBAEVF,EAAkBA,GAFR,eAGXA,GAAmBzB,EAxCA,KAqCR,GAIb2B,KAEIlD,EAAK8C,IAAShK,E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","file":"static/js/main.9958818a.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\n\nexport const palette = {\n  white: { main: '#fff' },\n  black: { main: '#000' },\n  primary: { main: '#2e3648', light: '#7ca3aa', middle: '#437f9c' },\n  secondary: { main: '#439c6d', middle: '#41b3a6', light: '#8db183' },\n  error: { main: '#ce3c3d' },\n  danger: { main: '#a00103', middle: '#d9534f', light: '#f2dede' },\n  lightGrey: { main: '#e5e5e5', light: '#f5f5f5' },\n  sandy: { main: '#eee0cd' },\n  grey: {\n    main: '#C0C0C0',\n    middle: '#6d737f',\n    light: '#999999',\n    lightBlue: '#cdd3df',\n  },\n  blue: {\n    deep: '#161FBC',\n    dark: '#1d5a6d',\n    main: '#2b809f',\n    middle: '#7DA5AC',\n    light: '#91C0C8',\n    graph: '#89CBE0',\n  },\n  green: {\n    deep: '#105700',\n    light: '#D0EED0',\n  },\n  links: { main: '#0078A8' },\n  graph: { main: '#89CBE0' },\n  lightGreen: { main: '#A9C68A' },\n  statuses: {\n    pending: '#d1863d',\n    running: '#429fcc',\n    finished: '#439c6d',\n    cancelled: '#e6594a',\n    failed: '#d84315',\n  },\n  deepBlueColorRange: [\n    'rgb(230,0,0) 0%',\n    'rgb(255,9,0) 10%',\n    'rgb(248,247,0) 35%',\n    'rgb(0,230,248) 65%',\n    'rgb(0,0,128) 100%',\n  ],\n  linearColorRange: [\n    'hsl(0, 80%, 50%) 0%',\n    'hsl(60, 80%, 50%) 25%',\n    'hsl(120, 80%, 50%) 50%',\n    'hsl(180, 80%, 50%) 75%',\n    'hsl(240, 80%, 50%) 100%',\n  ],\n  redToGreenRange: [\n    'rgb(255, 0, 0) 0%',\n    'rgb(255, 255, 0) 75%',\n    'rgb(0, 255, 0) 90%',\n    'rgb(0, 131, 9) 100%',\n  ],\n  graphLines: {\n    green: '#439c6d',\n    red: '#ce3c3d',\n    blue: '#161fbc',\n  },\n};\n\nconst typography = {\n  fontFamily: [\n    'Montserrat',\n    '\"Helvetica Neue\"',\n    'Helvetica',\n    'Arial',\n    'sans-serif',\n    'Tahoma',\n    'Verdana',\n    'sans-serif',\n    '\"Glyphicons Halflings\"',\n  ].join(','),\n};\n\nexport const theme = createMuiTheme({\n  defaultTransition: '.16s',\n  navbarHeight: 105,\n  baseSideBarWidth: 310,\n  projectMenuHeight: 37,\n  dashboardToolbarHeight: 80,\n  zIndexMap: 400,\n  zIndexNavBar: 1100,\n  zIndexMax: 1200,\n  palette,\n  typography,\n});\n","export const VALUES_KEY = 'values';\n\nexport const DEFAULT_GRAPH_SELECT_VALUE = '0';\n\nexport const DEFAULT_GRAPH_VALUE = 0;\n\nexport const WEATHER_GRAPH_COMMON_PARAMS = {\n  duration: {\n    name: 'duration',\n    label: 'Duration',\n  },\n  quantiles: {\n    name: 'quantiles',\n    label: 'Quantile',\n  },\n};\n\nexport const DEFAULT_GRAPH_WIDTH = 500;\nexport const DEFAULT_GRAPH_HEIGHT = 350;\n\nexport const DEFAULT_GRAPH_CANVAS_WIDTH = 420;\nexport const DEFAULT_GRAPH_CANVAS_HEIGHT = 350;\n\nexport const DEFAULT_LEVELS_BAR_WIDTH = 65;\n\nexport const MIN_ROSE_GRID_TICKS_AMOUNT = 3;\nexport const MIN_JPD_TICKS_AMOUNT = 6;\nexport const MIN_JPD_COLOR_TICKS_AMOUNT = 5;\nexport const MIN_WEATHER_GRAPH_TICKS_AMOUNT = 6;\nexport const MIN_CTS_GRAPH_TICKS_AMOUNT = 7;\nexport const MIN_TS_GRAPH_TICKS_AMOUNT = 8;\nexport const MIN_SCATTER_PLOT_TICKS_AMOUNT = 6;\nexport const MIN_ERROR_SCATTER_PLOT_TICKS_AMOUNT = 6;\nexport const MIN_EXTREME_PEAK_ROSE_TICKS_AMOUNT = 2;\nexport const MIN_RETURN_VALUE_TICKS_AMOUNT = 8;\n\nexport const VALID_GRID_TICKS_AMOUNT = { min: 2, max: 100 };\n\nexport const LEGAL_GRID_TICKS = [10, 5, 2, 1];\n\nexport const RAW_DATA_GRAPH_PARAMS_PATH = 'visualization.kwargs';\nexport const RAW_DATA_TITLE_PATH = 'visualization.web.dataLegend0';\n\nexport const WEATHER_GRAPH_VALUABLE_PARAMS = [\n  'quantileName',\n  'probabilityName',\n  'probabilityMinName',\n  'probabilityMaxName',\n  'durationName',\n  'ylabel',\n];\n\nexport const DISTRIBUTION_ROSE_GRAPH_VALUABLE_PARAMS = [\n  'varBinsName',\n  'histogramName',\n  'legendTitle',\n  'dirBinsName',\n];\n\nexport const INFINITY_LABEL = 'Infinity';\n\nexport const ANNUAL_INDEX = 0;\n\nexport const CTS_GRAPH_VALUABLE_PARAMS = ['yNames', 'xName'];\n\nexport const TS_GRAPH_VALUABLE_PARAMS = [\n  'yNames',\n  'xName',\n  'ymin',\n  'ymax',\n  'ylabel',\n];\n\nexport const MV_PROFILE_GRAPH_VALUABLE_PARAMS = [\n  'yName',\n  'xName',\n  'x2Name',\n  'invertY',\n];\n\nexport const JPD_GRAPH_VALUABLE_PARAMS = [\n  'xName',\n  'yName',\n  'cName',\n  'cbarLabel',\n];\n\nexport const APD_GRAPH_VALUABLE_PARAMS = ['yName', 'xName'];\n\nexport const APD_GRAPH_EXTRA_PARAMS = [\n  {\n    param: 'law',\n    title: 'Univariate law',\n  },\n  {\n    param: 'shapeParameter',\n    title: 'Shape',\n  },\n  {\n    param: 'locationParameter',\n    title: 'Location',\n  },\n  {\n    param: 'scaleParameter',\n    title: 'Scale',\n  },\n];\n\nexport const SELECT_MODE = 'select';\nexport const SELECT_RANGE_MODE = 'selectRange';\nexport const SELECTED_RANGE_MODE = 'selectedRange';\nexport const RANGE_MODE = 'RANGE_MODE';\n\nexport const APD_HINT_BY_MODE = {\n  [SELECT_MODE]: 'Click to start selection',\n  [SELECT_RANGE_MODE]: 'Click to complete selection',\n  [SELECTED_RANGE_MODE]: 'Click to deselect the range',\n};\n\nexport const WIND_STATS_ID_PATTERN = 'WIN';\nexport const ALTITUDE_TYPE = 'altitude';\nexport const DEPTH_TYPE = 'depth';\n\nexport const STATS_API_UNITS_TO_COMMON_UNITS = {\n  'm.s-1': 'm/s',\n  'm.s$^-$$^1$': 'm/s',\n  degrees: '°',\n  degree: '°',\n};\n\nexport const STATS_API_SELECT_POSTFIX = 'Choice';\n\nexport const DEFAULT_AXIS_INDEX = 0;\n\nexport const PD_SELECT_OCCURENCE_KEY = 'count';\n\nexport const DP_VCLASS_TYPE = 'dp';\n\nexport const THETAW_VCLASS_TYPE = 'thetaw';\n\nexport const THETA_VCLASS_TYPE = 'theta';\n\nexport const PD_SELECT_TITLES_BY_VCLASS_TYPE = {\n  [DP_VCLASS_TYPE]: 'dp',\n  [THETAW_VCLASS_TYPE]: 'θ',\n};\n\nexport const XY_NESTING_ORDER = 'xy_nesting';\nexport const YX_NESTING_ORDER = 'yx_nesting';\n\nexport const GRAPH_EMPTY_PLACEHOLDER = -999;\n\nexport const JPD_THRESHOLD_FACTOR = 256;\n\nexport const GRAPHS_WIDGETS = {\n  months: 'monthSelect',\n  vclass: 'vclassSelect',\n};\n\n// EVA - Extreme Value Analysis\nexport const EVA_MAIN_VARIABLES = 'mainVariable';\nexport const EVA_DATA_PATH = 'data[0]';\nexport const EVA_PERIODS = 'returnPeriods';\nexport const EVA_VARIANTS = 'variants';\nexport const EVA_VARIANT_PARAMS_TO_PICK = [\n  'law',\n  'returnValues',\n  'returnValuesUpper',\n  'returnValuesLower',\n];\n\nexport const OFFSET_ANGLE = 90;\n\nexport const EPD_GRAPH_VALUABLE_PARAMS = ['yName', 'xName', 'cName'];\n\nexport const PROBABILITY_KEYS = {\n  EJPD: 'cName',\n  EPD: 'yName',\n};\n\nexport const OMNIDIRECTIONAL_TITLE = 'Omnidirectional';\n\nexport const APD_GRAPH_TOOLTIP_TITLE_PATH = 'variables.variables.0.longName';\n\n// TODO if there wouldn't be any real data from api, hardcode it on server side\nexport const RETURN_VALUE_X_AXIS_VARIABLE = {\n  units: 'years',\n  name: '',\n  longName: 'Return Period',\n};\n\nexport const EXTREME_PARAMETERS = [\n  { key: 'law', name: 'Law' },\n  { key: 'multivariateLaw', name: 'Multivariate law' },\n  { key: 'sampleLength', name: 'Sample length' },\n  { key: 'blockSize', name: 'Block size' },\n  { key: 'threshold', name: 'Threshold', units: 'm' },\n  { key: 'poissonLambda', name: 'Poisson Lambda' },\n  { key: 'shapeParameter', name: 'Shape' },\n  { key: 'scaleParameter', name: 'Scale', units: 'm' },\n  { key: 'locationParameter', name: 'Location', units: 'm' },\n  { key: 'independenceFactor', name: 'Independence factor', precision: 1 },\n];\n\n// className to use on transparent svg elements to not include them in rendering while saving as image\nexport const IGNORE_ON_SAVING_CLASS = 'svg-ignore-on-saving';\n\nexport const IMAGE_GRAPH_DATA_FORMAT = 'Image';\nexport const EXCEL_GRAPH_DATA_FORMAT = 'Excel';\nexport const MATLAB_GRAPH_DATA_FORMAT = 'Matlab';\nexport const NETCDF_GRAPH_DATA_FORMAT = 'NetCDF';\n\nexport const DEFAULT_GRAPH_DATA_LOADING_FORMATS = [\n  IMAGE_GRAPH_DATA_FORMAT,\n  EXCEL_GRAPH_DATA_FORMAT,\n  MATLAB_GRAPH_DATA_FORMAT,\n  NETCDF_GRAPH_DATA_FORMAT,\n];\n\nexport const CHART_SVG_ID = 'chart-internal-svg';\nexport const CHART_TITLE_ID = 'chart-main-title';\n\nexport const DOWNLOADED_GRAPH_FILES_FORMATS = {\n  [EXCEL_GRAPH_DATA_FORMAT]: 'xls',\n  [MATLAB_GRAPH_DATA_FORMAT]: 'mat',\n  [NETCDF_GRAPH_DATA_FORMAT]: 'nc',\n};\n\nexport const CHART_CONTAINER_ID = 'stats-chart-container-id';\n\nexport const SVG_CAPTURE_MODE = 'svgSavingMode';\nexport const HTML_CAPTURE_MODE = 'htmlSavingMode';\n","/**\n * Get [min, max] array from two given numbers\n * @param { number } a\n * @param { number } b\n * @returns { array }\n */\nexport const getMinMax = (a, b) => (a < b ? [a, b] : [b, a]);\n\n/**\n * tests value to be in range from a to b\n * @param {number} value\n * @param {number} start\n * @param {number} end\n */\nexport const inRange = (value, start, end) => start <= value && value <= end;\n\nexport const isNullOrUndefined = (value) =>\n  value === null || typeof value === 'undefined';\n\n/**\n * returns function build from given sequence. Each call will return next sequence value.\n * after last value, 1 value will be returned again and so on\n * @param { array } sequence\n * @returns {function(): *}\n * @example\n *   const seqNext = cyclicSequenceGenerator([1,2,3])\n *   seqNext() // 1\n *   seqNext() // 2\n */\nexport const cyclicSequence = (sequence) => {\n  if (!Array.isArray(sequence)) {\n    throw Error('array expected');\n  }\n\n  const generator = (function* recursiveGenerator() {\n    yield* sequence;\n    return yield* recursiveGenerator();\n  })();\n\n  return () => generator.next().value;\n};\n\n/**\n * returns ascending range object from given range limits in any order\n * @param { number } a - one range limit\n * @param { number } b - other range limit\n * @returns {{ start: number, end: number }}\n */\nexport const getAscendingRange = (a, b) =>\n  a <= b ? { start: a, end: b } : { start: b, end: a };\n\n/**\n * rounds given float value. By default precision is 4 digits after comma\n * it's enough in most cases\n * @param value\n * @param precision\n * @returns { number }\n */\nexport const floatRound = (value, precision = 4) => {\n  const factor = 10 ** precision;\n  return Math.round(value * factor) / factor;\n};\n","/**\n * returns int if given value is integer otherwise float with given precision\n * @param { string|number } value\n * @param { number } precision num of digits after point\n * @returns { number }\n */\nexport const getPrettyNumber = (value, precision = 2) => {\n  const preparedValue = parseFloat(value);\n  if (!preparedValue && preparedValue !== 0) {\n    throw Error('sorry');\n  }\n  // eslint-disable-next-line\n  return value === ~~preparedValue\n    ? preparedValue\n    : +preparedValue.toFixed(precision);\n};","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme) => ({\n  container: {\n    backgroundColor: theme.palette.black.main,\n    padding: 10,\n    opacity: 0.8,\n    color: theme.palette.white.main,\n  },\n}));\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { APD_HINT_BY_MODE } from 'constants/graphs';\nimport { isNullOrUndefined } from 'helpers/common';\n\nimport { useStyles } from './styles';\n\nconst xFormatter = (xFrom, xTo) =>\n  [xFrom, xTo].some(isNullOrUndefined)\n    ? `>=${xFrom}m/s`\n    : `[${xFrom}m/s ; ${xTo}m/s]`;\n\nconst yFormatter = (yValue) => `${yValue}%`;\n\n/**\n * CustomTooltip is component which renders tooltip for graph\n * @param {boolean} active is active tooltip now or not\n * @param {string} xLabel label for data from x axis\n * @param {number} xFrom value from x axis\n * @param {number} xTo value from x axis\n * @param {string} yLabel label for data from y axis\n * @param {number} yValue value from y axis\n * @param {string} mode mode of selection in graph\n */\nconst CustomTooltip = ({\n  active,\n  xLabel,\n  xFrom,\n  xTo,\n  yValue,\n  yLabel,\n  mode,\n}) => {\n  const classes = useStyles();\n  if (!active) {\n    return null;\n  }\n  const hintText = APD_HINT_BY_MODE[mode];\n  return (\n    <div className={classes.container}>\n      <div>{xLabel}</div>\n      <div>{xFormatter(xFrom, xTo)}</div>\n      <div>\n        {yLabel}: {yFormatter(yValue)}\n      </div>\n      <div>{hintText}</div>\n    </div>\n  );\n};\n\nCustomTooltip.propTypes = {\n  xLabel: PropTypes.string.isRequired,\n  xFrom: PropTypes.number,\n  xTo: PropTypes.number,\n  yValue: PropTypes.number.isRequired,\n  yLabel: PropTypes.string.isRequired,\n  mode: PropTypes.string.isRequired,\n};\n\nexport default CustomTooltip;\n","import React, { useState, useCallback } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Cell,\n} from 'recharts';\nimport { range, reduce } from 'lodash';\nimport PropTypes from 'prop-types';\n\nimport { palette } from 'theme';\nimport { SELECT_MODE, SELECT_RANGE_MODE, RANGE_MODE } from 'constants/graphs';\nimport {getMinMax, inRange, isNullOrUndefined} from 'helpers/common';\nimport { getPrettyNumber } from 'helpers/data';\n\nimport CustomTooltip from './CustomTooltip';\n\n/**\n * ProbabilityDistribution component. Renders Probability Distribution graph for given data\n * @param { object } graphData data of graph\n * @param { number } widthGraph width of graph\n * @param { number } heightGraph height of graph\n * @param { string } xlabel label for x axis\n * @param { string } ylabel label for y axis\n * @param { number } maxYValue max number of y axis\n * @param { array } yTicks values of y axis ticks\n * @returns {JSX}\n * @note should be used in svg context\n */\nconst ProbabilityDistribution = ({\n  graphData,\n  widthGraph = 500,\n  heightGraph = 400,\n  xlabel,\n  yTicks,\n  maxYValue,\n  ylabel,\n}) => {\n  const [hoverColumn, setHoverColumn] = useState(null);\n  const [mode, setMode] = useState(SELECT_MODE);\n  const [selectedCols, setSelectedCols] = useState({\n    start: null,\n    end: null,\n  });\n\n  const getColorBar = useCallback(\n    (idx) => {\n      const { start, end } = selectedCols;\n      const selectionColor = palette.blue.dark;\n\n      const color =\n        (mode === SELECT_MODE && idx === hoverColumn) ||\n        (mode === RANGE_MODE && inRange(idx, ...getMinMax(start, end))) ||\n        (mode === SELECT_RANGE_MODE &&\n          inRange(idx, ...getMinMax(start, hoverColumn)))\n          ? selectionColor\n          : palette.blue.main;\n\n      return color;\n    },\n    [hoverColumn, mode, selectedCols]\n  );\n\n  const onMouseAction = useCallback(\n    (event) => {\n      if (event && event.activeTooltipIndex !== hoverColumn) {\n        setHoverColumn(event.activeTooltipIndex);\n      }\n    },\n    [setHoverColumn, hoverColumn]\n  );\n\n  const onMouseLeave = useCallback(() => setHoverColumn(null), [\n    setHoverColumn,\n  ]);\n\n  const onClick = useCallback(\n    ({ idx }) => {\n      if (mode === RANGE_MODE) {\n        return setMode(SELECT_MODE);\n      }\n\n      setMode(mode === SELECT_MODE ? SELECT_RANGE_MODE : RANGE_MODE);\n      setSelectedCols(({ start }) =>\n        mode === SELECT_MODE ? { start: idx } : { start, end: idx }\n      );\n    },\n    [setMode, mode]\n  );\n\n  const getOccurence = useCallback(() => {\n    if (mode === SELECT_MODE && !isNullOrUndefined(hoverColumn)) {\n      return getPrettyNumber(graphData[hoverColumn].gy);\n    }\n\n    const [min, max] = getMinMax(\n      selectedCols.start,\n      mode === SELECT_RANGE_MODE && !isNullOrUndefined(hoverColumn)\n        ? hoverColumn\n        : selectedCols.end\n    );\n\n    return getPrettyNumber(\n      reduce(\n        range(0, max - min + 1, 1),\n        (result, i) => result + graphData[min + i].gy,\n        0\n      )\n    );\n  }, [hoverColumn, selectedCols, mode, graphData]);\n\n  const getRange = useCallback(() => {\n    if (mode === SELECT_MODE && !isNullOrUndefined(hoverColumn)) {\n      return {\n        xFrom: graphData[hoverColumn].gx,\n        xTo:\n          hoverColumn !== graphData.length - 1\n            ? graphData[hoverColumn + 1].gx\n            : null,\n      };\n    }\n\n    const [xFrom, xTo] = getMinMax(\n      selectedCols.start,\n      mode === SELECT_RANGE_MODE && !isNullOrUndefined(hoverColumn)\n        ? hoverColumn\n        : selectedCols.end\n    );\n\n    return {\n      xFrom,\n      xTo,\n    };\n  }, [mode, hoverColumn, selectedCols, graphData]);\n\n  const yValue = getOccurence();\n  const { xFrom, xTo } = getRange();\n\n  return (\n    <BarChart\n      width={widthGraph}\n      height={heightGraph}\n      data={graphData}\n      barCategoryGap={0}\n      onMouseMove={onMouseAction}\n      onMouseEnter={onMouseAction}\n      onMouseLeave={onMouseLeave}\n    >\n      <XAxis\n        tick={{\n          fontSize: 9,\n        }}\n        label={{ value: xlabel, position: 'bottom', offset: -10 }}\n      />\n      <YAxis\n        ticks={yTicks}\n        domain={[0, maxYValue]}\n        tick={{\n          fontSize: 9,\n        }}\n        label={{\n          value: ylabel,\n          angle: -90,\n          position: 'center',\n          offset: 0,\n        }}\n      />\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <Bar dataKey=\"gy\" onClick={onClick} onMouseEnter={(...args) => console.log(args)}>\n        {graphData.map((item, index) => (\n          <Cell\n            cursor=\"pointer\"\n            key={`cell-${item.gx}`}\n            fill={getColorBar(index)}\n          />\n        ))}\n      </Bar>\n      <Tooltip\n        content={\n          <CustomTooltip\n            mode={mode}\n            xLabel=\"Wind speed\"\n            yLabel=\"Occurrence\"\n            xFrom={xFrom}\n            xTo={xTo}\n            yValue={yValue}\n          />\n        }\n        cursor={false}\n      />\n    </BarChart>\n  );\n};\n\nProbabilityDistribution.propTypes = {\n  graphData: PropTypes.arrayOf(\n    PropTypes.shape({\n      gx: PropTypes.number.isRequired,\n      gy: PropTypes.number.isRequired,\n      idx: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n  widthGraph: PropTypes.number,\n  heightGraph: PropTypes.number,\n  xlabel: PropTypes.string.isRequired,\n  ylabel: PropTypes.string.isRequired,\n  yTicks: PropTypes.arrayOf(PropTypes.number).isRequired,\n  maxYValue: PropTypes.number.isRequired,\n};\n\nexport default ProbabilityDistribution;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles({\n  root: {\n    position: 'relative',\n    left: -10,\n    top: ({ up, overflowLength }) => (up ? -overflowLength : 0),\n  },\n});\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useStyles } from './styles';\n\n/**\n * Levels selector axis.\n * @param { bool } up - whether axis is up direction\n * @param { string } color - stroke and fill axis color\n * @param { number } length - select length\n * @param { number } overflowLength length of Y axis overflow part\n * @returns {JSX}\n */\nconst LevelsAxis = ({ up, color, length, overflowLength }) => {\n  const classes = useStyles({ up, overflowLength });\n  const fullLength = length + overflowLength;\n\n  return (\n    <svg className={classes.root} width=\"20\" height={fullLength}>\n      <defs>\n        <marker\n          id=\"levels-axis\"\n          viewBox=\"0 -10 25 25\"\n          refX=\"20\"\n          refY=\"0\"\n          markerWidth=\"16\"\n          markerHeight=\"20\"\n          orient=\"auto\"\n        >\n          <path fill={color} stroke={color} d=\"M 0 -8 L 20 0 L 0 8\"></path>\n        </marker>\n      </defs>\n      <line\n        stroke={color}\n        x1=\"10\"\n        y1={up ? fullLength : 0}\n        x2=\"10\"\n        y2={up ? 0 : fullLength}\n        strokeWidth=\"1\"\n        markerEnd=\"url(#levels-axis)\"\n      />\n    </svg>\n  );\n};\n\nLevelsAxis.propTypes = {\n  up: PropTypes.bool,\n  color: PropTypes.string,\n  length: PropTypes.number.isRequired,\n  overflowLength: PropTypes.number,\n};\n\nLevelsAxis.defaultProps = {\n  up: false,\n  color: 'black',\n  overflowLength: 50,\n};\n\nexport default memo(LevelsAxis);\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme) => ({\n  container: {\n    zIndex: 1,\n    width: 60,\n    height: ({ height }) => height,\n    lineHeight: ({ isLongMode }) => (isLongMode ? 1 : 'normal'),\n    borderLeft: `solid 1px ${theme.palette.black.main}`,\n  },\n  levelContainer: {\n    background: theme.palette.blue.graph,\n    width: 20,\n    borderTop: `solid 0.5px ${theme.palette.black.main}`,\n    borderRight: `solid 0.5px ${theme.palette.black.main}`,\n    marginRight: 5,\n    '&:hover': {\n      background: theme.palette.blue.light,\n    },\n  },\n  level: {\n    flex: 1,\n  },\n  tickContainer: {\n    flex: 1,\n    fontSize: ({ isLongMode }) => (isLongMode ? 7 : 9),\n  },\n  lastLevelContainer: {\n    borderBottom: `solid 1px ${theme.palette.black.main}`,\n  },\n  currentLevel: {\n    background: theme.palette.blue.main,\n  },\n  currentLevelLabel: {\n    fontWeight: 700,\n  },\n  titleContainer: {\n    width: 10,\n    position: 'relative',\n  },\n  title: {\n    width: 200,\n    transform: 'rotate(-90deg)',\n    position: 'absolute',\n    left: -110,\n  },\n  axisContainer: {\n    width: 0,\n  },\n  levelButton: {\n    outline: 'none',\n    width: '100%',\n    height: '100%',\n    padding: 0,\n    margin: 0,\n    cursor: 'pointer',\n  },\n}));\n","import React, { memo, useMemo, useCallback } from 'react';\nimport { Grid } from '@material-ui/core';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport { getPrettyNumber } from 'helpers/data';\nimport LevelsAxis from 'components/graphs/LevelsAxis';\n\nimport { useStyles } from './styles';\nimport {ALTITUDE_TYPE} from \"constants/graphs\";\nimport {palette} from \"theme\";\n\nconst LONG_AMOUNT = 30;\nconst EXTRA_LONG_AMOUNT = 50;\nconst BASIC_HEIGHT = 360;\nconst EXTRA_LONG_HEIGHT = 450;\n\n/**\n * Renders block with level selection\n * @param { array } levels array of levels for rendering\n * @param { number } currentLevel active level\n * @param { string } type - levels type. Could be 'depth' or 'altitude'\n * @param { string } className - wrapper class name\n * @param { function } selectLevel - callback for level selection, takes level index as argument\n * @param { number } height - use it if height should be forced\n */\nconst GraphLevelSelect = ({\n  levels,\n  currentLevel,\n  type,\n  selectLevel,\n  className,\n  height: heightFromProps,\n}) => {\n  const amount = levels.length;\n\n  const isLongMode = amount > LONG_AMOUNT;\n  const height = {\n    true: BASIC_HEIGHT,\n    [!!heightFromProps]: heightFromProps,\n    [!heightFromProps && amount > EXTRA_LONG_AMOUNT]: EXTRA_LONG_HEIGHT,\n  }.true;\n\n  const classes = useStyles({ isLongMode, height });\n  const isReversed = type === ALTITUDE_TYPE;\n\n  const onClickLevel = useCallback(\n    ({ currentTarget }) => {\n      const index = currentTarget.getAttribute('data-index');\n\n      if (!index) {\n        return false;\n      }\n      const levelIndex = isReversed ? levels.length - 1 - index : index;\n      selectLevel(+levelIndex);\n    },\n    [selectLevel, levels, isReversed]\n  );\n\n  const preparedLevels = useMemo(() => {\n    const roundedLevels = levels.map((level) => getPrettyNumber(level, 0));\n    return isReversed ? roundedLevels.reverse() : roundedLevels;\n  }, [levels, isReversed]);\n\n  const lastIndex = levels.length - 1;\n  const selectedIndex = isReversed ? lastIndex - currentLevel : currentLevel;\n\n  return (\n    <Grid className={className} container>\n      <Grid\n        item\n        className={classes.titleContainer}\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n        xs\n      >\n        <Grid item className={classes.title} data-html2canvas-ignore>\n          {`Choose your ${type} (m)`}\n        </Grid>\n      </Grid>\n      <Grid className={classes.axisContainer} item>\n        <LevelsAxis color={palette.grey.light} up={isReversed} length={height} overflowLength={30} />\n      </Grid>\n      <Grid\n        item\n        container\n        direction=\"column\"\n        justify=\"space-between\"\n        wrap=\"nowrap\"\n        className={classes.container}\n      >\n        {preparedLevels.map((item, index) => (\n          <Grid container item className={classes.level} key={item}>\n            <Grid\n              item\n              className={classNames(classes.levelContainer, {\n                [classes.lastLevelContainer]: index === lastIndex,\n              })}\n            >\n              <div\n                tabIndex=\"0\"\n                aria-label=\"select-level\"\n                role=\"button\"\n                className={classNames(classes.levelButton, {\n                  [classes.currentLevel]: index === selectedIndex,\n                })}\n                onClick={onClickLevel}\n                data-index={index}\n              />\n            </Grid>\n            <Grid\n              item\n              container\n              direction=\"column\"\n              justify=\"center\"\n              className={classes.tickContainer}\n            >\n              <Grid\n                item\n                className={classNames({\n                  [classes.currentLevelLabel]: index === selectedIndex,\n                })}\n              >\n                {item}\n              </Grid>\n            </Grid>\n          </Grid>\n        ))}\n      </Grid>\n    </Grid>\n  );\n};\n\nGraphLevelSelect.propTypes = {\n  levels: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  ).isRequired,\n  currentLevel: PropTypes.number,\n  type: PropTypes.oneOf(['altitude', 'depth']).isRequired,\n  selectLevel: PropTypes.func.isRequired,\n};\n\nGraphLevelSelect.defaultProps = {\n  currentLevel: 0,\n};\n\nexport default memo(GraphLevelSelect);\n","import * as humps from 'humps';\n\n/**\n * Decamelize form data keys and values\n * @param {FormData} formData\n * @param {Object} [options]\n * @return {FormData}\n */\nexport const decamelizeFormDataKeys = (formData, options) => {\n  const decamelizedFormData = new FormData();\n\n  formData.forEach((value, key) => {\n    const decamelizedValue =\n      value instanceof File || value instanceof FileList\n        ? value\n        : humps.decamelizeKeys(value, options);\n\n    decamelizedFormData.append(\n      humps.decamelize(key, options),\n      decamelizedValue\n    );\n  });\n\n  return decamelizedFormData;\n};\n\n/**\n * Decamelize object keys with ignore form data\n * @param {Object} data\n * @param {Object} [options]\n */\nexport const decamelizeKeys = (data, options) => {\n  if (data instanceof FormData) {\n    return decamelizeFormDataKeys(data, options);\n  }\n\n  return humps.decamelizeKeys(data, options);\n};\n\n/**\n * Camelizes value if it's necessary\n * @param { string } value\n */\nexport const toCamelCase = (value) => {\n  if (!/[\\s-_]/.test(value)) {\n    return value;\n  }\n  return humps.camelize(value);\n};\n\n/**\n * Decamelize value\n * @param {String} value\n * @param {Object} [options]\n */\nexport const toSnakeUpperCase = (value, options) =>\n  humps.decamelize(value, options).toUpperCase();\n\n/**\n * Camelizes object keys\n * @param args\n */\nexport const camelizeKeys = (...args) => humps.camelizeKeys(...args);\n\n/**\n * Camelizes object values\n * @param { object } objectToCamelize\n */\nexport const camelizeValues = (objectToCamelize) =>\n  Object.entries(objectToCamelize).reduce((acc, [key, value]) => {\n    acc[key] = humps.camelize(value);\n    return acc;\n  }, {});\n\n/**\n * Camelizes both object keys and values\n * @param { object } objectToCamelize\n */\nexport const camelizeBoth = (objectToCamelize) =>\n  Object.entries(objectToCamelize).reduce((acc, [key, value]) => {\n    acc[humps.camelize(key)] = humps.camelize(value);\n    return acc;\n  }, {});\n","/**\n * standard regexp (RFC 5322 Official Standard)\n * @type {RegExp}\n */\nexport const EMAIL_REGEXP = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n/**\n * url regexp\n * @type {RegExp}\n */\nexport const URL_REGEXP = /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/;\n\n/**\n * number regexp\n * @type {RegExp}\n */\nexport const NUMBER_REGEXP = /^(-)?(\\d+)[.]?(\\d+)?$/;\n\n/**\n * number regexp\n * @type {RegExp}\n */\nexport const NUMBER_REGEXP_WITH_COMMA = /^-?\\d*?([,.])?(\\d*)?$/;\n\n/**\n * space regexp\n * @type {RegExp}\n */\nexport const SPACE_REGEXP = /[\\s]/;\n\n/**\n * unit regexp for graph labels. First matching group is label second - units\n * @type {RegExp}\n */\nexport const UNIT_REGEXP = /(.*)\\s\\[(.*)\\]/;\n\n/**\n * regexp for template variables in stats data ('some ${VAR} text')\n * @type {RegExp}\n */\nexport const STATS_TEMPLATE_VARIABLE_REGEXP = /[\\s]*\\${.*}/;\n\n/**\n * regexp for units template in stats data (ex.: 'some var [%]')\n */\nexport const STATS_UNITS_REGEXP = /\\[.*]/g;\n\n/**\n * FIXME: do we really need/use this constant? Remove if not.\n * regexp for string that contains at least one uppercase letter and at least one number\n * may also contain latin and special characters\n * @type {RegExp}\n */\nexport const INCLUDES_UPPERCASE_AND_NUMBER = /([A-Z]+.*\\d+)|(\\d+.*[A-Z]+)/;\n\n/**\n * Regexp for password, contains at least one uppercase letter, lowecase letter and digit.\n * May also contain special characters. The length is not limited.\n * @type {RegExp}\n */\nexport const PASSWORD_REGEXP = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).+$/;\n\n/**\n * vclass type regexp. Helps to parse stats_id and get vclass type\n * vclass is some additional widget for graph\n * @type {RegExp}\n */\nexport const VCLASS_TYPE_REGEXP = /-([\\w]*)-vclass/;\n\n/**\n * regexp for series of numbers from 1 to 99\n * @type {RegExp}\n */\nexport const ONE_TO_NINETY_NINE_NUMBERS_SERIES_REGEXP = /^(([1-9]|[1-9][0-9]),)*([1-9]|[1-9][0-9])$/;\n\n/**\n * regexp for planning table coordinates(ex.: B5:K10)\n * @type {RegExp}\n */\nexport const PLANNING_TABLE_COORDINATES_REGEXP = /^[a-zA-Z]\\d+:[a-zA-Z]\\d+$/;\n\n/**\n * regexp to get first word from camelCased name\n * @type {RegExp}\n */\nexport const FIRST_CAMEL_CASE_WORD_REGEXP = /^[\\w]+(?=[A-Z])/;\n\n/**\n * regexp to check if stats id is for monthly data\n * @type {RegExp}\n */\nexport const STATS_ID_MONTH_REGEXP = /month/;\n\n/**\n * regexp to check any word character with - and -\n * @type {RegExp}\n */\nexport const PROJECT_NAME_REGEXP = /^[-\\w]+$/;\n\n/**\n * regexp for deprecated characters\n * @type {RegExp}\n */\nexport const PROJECT_NAME_DEPRECATED_REGEXP = /[^-\\w]/;\n","import { min, max, range, reduce, get, pick, floor } from 'lodash';\n\nimport {\n  VALUES_KEY,\n  RAW_DATA_GRAPH_PARAMS_PATH,\n  APD_GRAPH_VALUABLE_PARAMS,\n  APD_GRAPH_EXTRA_PARAMS,\n  APD_GRAPH_TOOLTIP_TITLE_PATH,\n} from 'constants/graphs';\nimport { INVALID_GRAPH_DATA } from 'constants/errors';\nimport { camelizeBoth } from 'helpers/camelizer';\nimport { getPrettyNumber } from 'helpers/data';\nimport {\n  getLevelsTypeByStatsId,\n  getPreparedUnits,\n  getTitleAdditionByLevelType,\n  getTitleFromRawGraphData,\n} from 'helpers/graphs/common';\n\nexport const getPreparedGraphData = (\n  graphData,\n  yTickStep,\n  currentLevel = 0\n) => {\n  const rawGraphParams = get(graphData, RAW_DATA_GRAPH_PARAMS_PATH, null);\n  if (!rawGraphParams) {\n    throw Error(INVALID_GRAPH_DATA);\n  }\n\n  const { yName, xName } = camelizeBoth(\n    pick(rawGraphParams, APD_GRAPH_VALUABLE_PARAMS)\n  );\n  const xValues = graphData[xName][VALUES_KEY][currentLevel];\n  const yValues = graphData[yName][VALUES_KEY][currentLevel];\n  const data = xValues.map((item, idx) => ({\n    gx: item,\n    gy: yValues[idx],\n    idx,\n  }));\n  const [maxYValue, minYValue] = [max(yValues), min(yValues)];\n  const yTicks = range(floor(minYValue), maxYValue, yTickStep);\n  const extraParams = reduce(\n    APD_GRAPH_EXTRA_PARAMS,\n    (result, item) => {\n      const value = graphData[item.param][VALUES_KEY][currentLevel][0];\n      result.push({\n        title: item.title,\n        value: Number.isFinite(value) ? getPrettyNumber(value) : value,\n        key: item.param,\n      });\n      return result;\n    },\n    []\n  );\n  const { ylabel, xlabel } = rawGraphParams;\n  return [data, yTicks, extraParams, maxYValue, ylabel, xlabel];\n};\n\n/**\n * returns prepared APD graph extra params by graph data\n * @param { object } rawGraphData\n * @param { number|null } levelIndex\n * @returns { array }\n */\nconst getPreparedApdExtraParams = (rawGraphData, levelIndex = null) =>\n  APD_GRAPH_EXTRA_PARAMS.reduce((acc, { param, title }) => {\n    if (!rawGraphData[param]) {\n      return acc;\n    }\n    const paramPath =\n      levelIndex !== null\n        ? [param, VALUES_KEY, levelIndex, 0]\n        : [param, VALUES_KEY, 0];\n    const value = get(rawGraphData, paramPath, '');\n    acc.push({\n      name: title,\n      key: param,\n      value: !Number.isNaN(+value) ? getPrettyNumber(value) : value,\n    });\n    return acc;\n  }, []);\n\n/**\n * returns prepared AnalyticalProbabilityDistribution graph data\n * if there's no levels in graph data return object\n * if there's levels, returns an array where item is graphData for some level\n * (e.g. 0 index item is data for levels[0] level and so on)\n * @param rawGraphData\n * @returns {{\n      data: array,\n      extraParams: array,\n      minYValue: number,\n      maxYValue: number,,\n      ylabel: string,\n      xlabel: string,\n      xUnits: string,\n      levels: array,\n      tooltipTitle: string,\n    }} or array of such objects\n */\nexport const getPreparedAnalyticalProbabilityGraphData = (rawGraphData) => {\n  const rawGraphParams = get(rawGraphData, RAW_DATA_GRAPH_PARAMS_PATH, null);\n  if (!rawGraphParams) {\n    throw Error(INVALID_GRAPH_DATA);\n  }\n\n  const { yName, xName } = camelizeBoth(\n    pick(rawGraphParams, APD_GRAPH_VALUABLE_PARAMS)\n  );\n\n  const xValuesParams = rawGraphData[xName];\n  const yValuesParams = rawGraphData[yName];\n  const { ylabel: yLabel, xlabel: xLabel } = rawGraphParams;\n  const xUnits = getPreparedUnits(xValuesParams.attributes.units);\n  const tooltipTitle = get(rawGraphData, APD_GRAPH_TOOLTIP_TITLE_PATH, '');\n  const title = getTitleFromRawGraphData(rawGraphData);\n  const levels =\n    rawGraphData.level && rawGraphData.level[VALUES_KEY]\n      ? {\n        type: getLevelsTypeByStatsId(rawGraphData.id),\n        values: rawGraphData.level[VALUES_KEY],\n      }\n      : {};\n  const hasLevels = !!Object.keys(levels).length;\n\n  if (!hasLevels) {\n    const extraParams = getPreparedApdExtraParams(rawGraphData);\n    const xValues = xValuesParams[VALUES_KEY];\n    const yValues = yValuesParams[VALUES_KEY];\n    const maxYValue = Math.max(...yValues);\n    const minYValue = Math.min(...yValues);\n    const data = xValues.map((item, index) => ({\n      xValue: getPrettyNumber(item),\n      yValue: getPrettyNumber(yValues[index]),\n    }));\n\n    return {\n      data,\n      title,\n      extraParams,\n      minYValue,\n      maxYValue,\n      yLabel,\n      xLabel,\n      xUnits,\n      levels,\n      tooltipTitle,\n    };\n  }\n\n  const xValuesByLevel = xValuesParams[VALUES_KEY];\n  const yValuesByLevel = yValuesParams[VALUES_KEY];\n\n  return xValuesByLevel.reduce((acc, xValues, levelIndex) => {\n    const levelTitleAddition = getTitleAdditionByLevelType(\n      levels.type,\n      levels.values[levelIndex]\n    );\n    const preparedTitle = `${title}\\n${levelTitleAddition}`;\n    const extraParams = getPreparedApdExtraParams(rawGraphData, levelIndex);\n    const yValues = yValuesByLevel[levelIndex];\n    const maxYValue = Math.max(...yValues);\n    const minYValue = Math.min(...yValues);\n    const data = xValues.map((item, index) => ({\n      xValue: getPrettyNumber(item),\n      yValue: getPrettyNumber(yValues[index]),\n    }));\n\n    acc.push({\n      data,\n      title: preparedTitle,\n      extraParams,\n      minYValue,\n      maxYValue,\n      yLabel,\n      xLabel,\n      xUnits,\n      levels,\n      tooltipTitle,\n    });\n\n    return acc;\n  }, []);\n};\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles({\n  paramsContainer: {\n    marginLeft: 20,\n  },\n});\n","import React from 'react';\n\nconst ParamElement = ({ title, value }) => (\n  <div>\n    <div>{title}:</div>\n    <div>{value}</div>\n  </div>\n);\n\nconst ParamsLegend = ({ params }) => {\n  return (\n    <div>\n      <p>\n        <strong>Parameters: </strong>\n      </p>\n      {params.map(({ key, title, value }) => (\n        <ParamElement key={`extraParam_${key}`} title={title} value={value} />\n      ))}\n    </div>\n  );\n};\n\nexport default ParamsLegend;\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { Grid } from '@material-ui/core';\nimport PropTypes from 'prop-types';\n\nimport ProbabilityDistribution from 'components/ProbabilityDistribution';\nimport { VALUES_KEY } from 'constants/graphs';\nimport GraphLevelSelect from 'components/graphs/GraphLevelSelect';\nimport { getPreparedGraphData } from 'helpers/apd';\n\nimport { useStyles } from './styles';\nimport ParamsLegend from './ParamsLegend';\n\n/**\n * AnalyticalProbabilityDistribution component. Renders Analytical Probability Distribution graph for given data\n * @param { object } graphData monthly data of graph\n * @param { number } widthGraph width of graph\n * @param { number } yTickStep number between two ticks in y axis\n * @returns {JSX}\n * @note should be used in svg context\n */\nconst ApdOld = ({\n  graphData,\n  widthGraph = 500,\n  yTickStep = 1,\n}) => {\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const classes = useStyles();\n  const heightGraph = widthGraph * 0.8;\n  const onClickLevel = useCallback((level) => setCurrentLevel(level), [\n    setCurrentLevel,\n  ]);\n  const [data, yTicks, extraParams, maxYValue, ylabel, xlabel] = useMemo(\n    () => getPreparedGraphData(graphData, yTickStep, currentLevel),\n    [graphData, yTickStep, currentLevel]\n  );\n\n  return (\n    <Grid justify=\"center\" container>\n      <Grid item>\n        <GraphLevelSelect\n          type=\"altitude\"\n          levels={graphData.level[VALUES_KEY]}\n          currentLevel={currentLevel}\n          selectLevel={onClickLevel}\n        />\n      </Grid>\n      <Grid item>\n        <ProbabilityDistribution\n          graphData={data}\n          yTicks={yTicks}\n          widthGraph={widthGraph}\n          heightGraph={heightGraph}\n          xlabel={xlabel}\n          ylabel={ylabel}\n          maxYValue={maxYValue}\n        />\n      </Grid>\n      <Grid item className={classes.paramsContainer}>\n        <ParamsLegend params={extraParams} />\n      </Grid>\n    </Grid>\n  );\n};\n\nApdOld.propTypes = {\n  graphData: PropTypes.any.isRequired,\n  widthGraph: PropTypes.number,\n  yTickStep: PropTypes.number,\n};\n\nexport default ApdOld;\n","export const NO_ID_IN_COLLECTION = `There's no 'id' in collection items`;\n\n/**\n * validation errors\n */\nexport const MINLENTH_ERROR_MESSAGE =\n  'Value should be at least {{length}} chars';\nexport const MAXLENGTH_ERROR_MESSAGE = `Values shouldn't be longer than {{length}} chars`;\nexport const REQUIRED_ERROR_MESSAGE = 'This field is required';\nexport const INVALID_EMAIL_MESSAGE = 'Incorrect email';\nexport const INVALID_URL_MESSAGE = 'Incorrect url';\nexport const IS_NOT_NUMBER = 'Value is not number';\nexport const INVALID_REGEXP = 'Incorrect string format';\nexport const BLANK_FIELD_MESSAGE = 'This field may not be blank';\n\nexport const INVALID_RULES_MESSAGE = 'Rules collection should be an array!';\nexport const INVALID_RULE_MESSAGE = 'Incorrect validation rule!';\n\nexport const INVALID_POSITION_OPTIONS = 'Invalid position options for map';\n\nexport const WRONG_DATE_FORMAT = 'Wrong date format';\n\nexport const INVALID_GEOJSON_STRING = 'Invalid geoJson string';\n\nexport const INVALID_NUMBER_FORMAT = 'Invalid number format';\n\nexport const ARRAY_EXPECTED = 'Invalid argument type, array expected';\n\nexport const ARRAY_OF_ARRAYS_EXPECTED =\n  'Invalid argument type, array of arrays expected';\n\nexport const EQUAL_XY_VALUES_AMOUNT_EXPECTED =\n  'Invalid values amount, same x and y amount expected';\n\nexport const CALCULATION_ERROR = 'Calculation error. Check given arguments!';\n\nexport const INVALID_LEVELS_AMOUNT = 'Invalid amount of given diagram levels';\n\nexport const INVALID_RADIUS = 'Invalid radius value';\n\nexport const INVALID_PROBABILITY_VALUE = 'Invalid probability value';\n\nexport const INVALID_GRAPH_DATA = 'Invalid graph data';\n\nexport const INVALID_VALUES_FORMAT = 'Invalid values fromat';\n\nexport const INVALID_ANGLE = 'Invalid angle';\n\nexport const INVALID_STEPS_AMOUNT = 'Invalid steps amount';\n\nexport const INVALID_TICKS_AMOUNT = 'Invalid ticks amount';\n\nexport const INVALID_RANGE = 'Invalid range value';\n\nexport const INVALID_MIN_MAX_RANGE = 'Invalid range, check min and max values';\n\nexport const INVALID_TOOLTIP_OPTIONS = 'Invalid tooltip options';\n\nexport const INVALID_TOOLTIP_PROP = 'Invalid prop for tooltip';\n\nexport const UNSUPPORTED_GRAPH_TYPE = 'Unsupported graph type';\n\nexport const DIFFERENT_PASSWORDS = 'The passwords are different';\n\nexport const INVALID_LEVEL_TYPE = 'Invalid level type';\n\nexport const INVALID_PARAMS_AMOUNT = 'Invalid params amount';\n\nexport const INVALID_PERCENT_VALUE = 'Invalid percent value';\n\nexport const INVALID_BREAKPOINTS = 'Invalid breakpoints';\n\nexport const INVALID_MIN_VALUE = 'Value should be at least {{minValue}}.';\n\nexport const INVALID_MAX_VALUE = `Value shouldn't be longer than {{maxValue}}.`;\n\nexport const NO_SUCH_NODE = 'No such node in DOM';\n\nexport const ONLY_CHARACTERS_AND_NUMBER =\n  'Only characters, numbers, \"-\", \"_\" are allowed';\n","export const analyticalProbabilityDistributionGraphData = {\n  id: 'WIN-magw-APD_2147',\n  point: {\n    id: '2147',\n    name: 'test',\n  },\n  layer: 'WIND',\n  type: 'APD',\n  name: 'Analytical probability distribution',\n  variables: {\n    variables: [\n      {\n        units: 'm.s-1',\n        hidden: false,\n        longName: 'wind speed',\n        name: 'magw',\n      },\n    ],\n    names: ['magw'],\n  },\n  visualization: {\n    driver: {\n      suffix: null,\n      method: 'plot_bars',\n      fileformat: '.png',\n      // eslint-disable-next-line\n      path: '/mnt/glusterfs/projects/dev-ma/MA/open-ocean/ENGIE-LNG/World/WIND/Visualization/WIN-magw-APD/2147_WIN-magw-APD_all${PER}__plot_bars.png'\n    },\n    web: {\n      'plot_bars-image-uri-0':\n        '/static/3.6.4/projects/dev-ma/MA/open-ocean/ENGIE-LNG/World/WIND/Visualization/WIN-magw-APD/2147_WIN-magw-APD_all%24%7BPER%7D__plot_bars.png',\n      'matlab-uri-0':\n        '/static/3.6.4/projects/dev-ma/MA/open-ocean/ENGIE-LNG/Deliverables/Data/2147/WIND/WIN-magw-APD_2147.mat',\n      'netcdf-uri-0':\n        '/static/3.6.4/projects/dev-ma/MA/open-ocean/ENGIE-LNG/Deliverables/Data/2147/WIND/WIN-magw-APD_2147.nc',\n      'excel-uri-0':\n        '/static/3.6.4/projects/dev-ma/MA/open-ocean/ENGIE-LNG/Deliverables/Data/2147/WIND/WIN-magw-APD_2147.xls',\n      'plot_bars-image-legend-0':\n        'Analytical probability distribution of wind speed at point test',\n      dataLegend0:\n        'Analytical probability distribution of wind speed at point test',\n      'data-uri-0':\n        '/api/projects/671/get_visu_data/?stats_id=WIN-magw-APD_2147',\n    },\n    kwargs: {\n      yName: 'magw_pdf',\n      xName: 'magw_bin',\n      ylabel: 'probability distribution [%]',\n      annotate: true,\n      grid: true,\n      xlabel: 'Wind speed [m.s-1]',\n    },\n  },\n  periodicity: 'all',\n  scaleParameter: {\n    attributes: {\n      standard_name: 'scale_parameter',\n      level_dependent: 'True',\n      description: 'scale parameter of the Weibull distribution of magw',\n      units: 'm.s-1',\n      long_name: 'scale parameter',\n      vartype: 'f8',\n    },\n    dimensions: ['level', 'point'],\n    values: [\n      [7.330993436166878],\n      [10.078317404706477],\n      [10.768210570322593],\n      [11.171744555961968],\n      [11.458077537639966],\n      [11.68021752503801],\n      [11.861629062500661],\n      [12.015068853510003],\n      [12.14795174466112],\n    ],\n  },\n  locationParameter: {\n    attributes: {\n      standard_name: 'location_parameter',\n      level_dependent: 'True',\n      description: 'location parameter of the Weibull distribution of magw',\n      units: 'm.s-1',\n      long_name: 'location parameter',\n      vartype: 'f8',\n    },\n    dimensions: ['level', 'point'],\n    values: [\n      [-2.0026453045666267e-10],\n      [-1.9127743579150418],\n      [-2.043747549734159],\n      [-2.1203379412711234],\n      [-2.174692181492106],\n      [-2.2169018359556087],\n      [-2.2513021337658636],\n      [-2.2804379947710522],\n      [-2.3056518869406473],\n    ],\n  },\n  global_attributes: {\n    statistic: 'Analytical probability distribution',\n    history: '2020-03-27 08:36: generated by Open Ocean',\n    location_name: 'test',\n    longitude: \"-18.45703 (18°27'25''W)\",\n    latitude: \"15.42191 (15°25'18''N)\",\n    srs: 'EPSG:4326',\n    period: '1979-01-01 00:00 - 2019-03-10 23:00',\n    WIND_dataset: 'CFSR~CFSV2%CFSR3D',\n    WIND_node_longitude: \"-18.50000 (18°30'W)\",\n    WIND_node_latitude: \"15.50000 (15°30'N)\",\n    WIND_node_distance: '9.8 km',\n    sampling_period: '1h',\n    depth: 2933.670347588957,\n  },\n  shapeParameter: {\n    attributes: {\n      standard_name: 'shape_parameter',\n      level_dependent: 'True',\n      description: 'shape parameter of the Weibull distribution of magw',\n      units: '',\n      long_name: 'shape parameter',\n      vartype: 'f8',\n    },\n    dimensions: ['level', 'point'],\n    values: [\n      [3.089925554404764],\n      [4.00365302487519],\n      [4.003677748711514],\n      [4.003673475487403],\n      [4.003673665596106],\n      [4.003705015525371],\n      [4.003692199185728],\n      [4.00369628087339],\n      [4.003687878442229],\n    ],\n  },\n  level: {\n    attributes: {\n      long_name: 'vertical level',\n      conventions: 'positive from seabed',\n      description: 'vertical level, in meters from mean sea level',\n      units: 'm',\n      vartype: 'f8',\n      standard_name: 'vertical level',\n    },\n    dimensions: ['level'],\n    values: [10, 25, 50, 75, 100, 125, 150, 175, 200],\n  },\n  law: {\n    attributes: {\n      description: 'name of the analytical law',\n      units: '',\n      vartype: 'S',\n    },\n    dimensions: ['level', 'point'],\n    values: [\n      ['Weibull'],\n      ['Weibull'],\n      ['Weibull'],\n      ['Weibull'],\n      ['Weibull'],\n      ['Weibull'],\n      ['Weibull'],\n      ['Weibull'],\n      ['Weibull'],\n    ],\n  },\n  magwPdf: {\n    attributes: {\n      standard_name: 'probability_distribution_function',\n      description: 'Weibull distribution of magw',\n      valid_max: '100.',\n      level_dependent: 'True',\n      units: '%',\n      long_name: 'probability distribution',\n      valid_min: '0.',\n      vartype: 'f8',\n    },\n    dimensions: ['level', 'magw_bin'],\n    values: [\n      [\n        3.529609233243572e-21,\n        0.6542303494164119,\n        2.7411722816187885,\n        6.114149177003311,\n        10.188415494529211,\n        13.941903879637055,\n        16.184043251824626,\n        16.08149053525881,\n        13.652777363521464,\n        9.826963410027583,\n        5.930328898948282,\n        2.960819931323176,\n        1.2050258586661275,\n        0.39351460259152204,\n        0.10141557881115805,\n        0.02027570385058071,\n        0.0030897664400851973,\n        0.0003524893139393589,\n        0.00002955956058826552,\n        0.0000017886796153174004,\n        7.664892757768861e-8,\n        2.2824050174664466e-9,\n        4.6333390772773643e-11,\n      ],\n      [\n        0.269665202006426,\n        0.9483422164330064,\n        2.265431676093507,\n        4.339242643268439,\n        7.115523196472518,\n        10.26586073066186,\n        13.144815453214017,\n        14.905931659412689,\n        14.83059793995441,\n        12.758230678256075,\n        9.311827321435127,\n        5.6374985454277695,\n        2.7588167552402467,\n        1.0602683616765085,\n        0.3100310528796704,\n        0.06664243197402638,\n        0.010147735704474178,\n        0.001052106833807893,\n        0.0000712074911633973,\n        0.00000300875870467166,\n        7.571724804379268e-8,\n        1.080030647302972e-9,\n        8.289800481590374e-12,\n      ],\n      [\n        0.25240451224429455,\n        0.8307647463929653,\n        1.9240301830374225,\n        3.6327279546185625,\n        5.943219715398772,\n        8.657181557454996,\n        11.346533692389636,\n        13.39245696804434,\n        14.157771669654963,\n        13.270707514844156,\n        10.879486009485275,\n        7.671251797700418,\n        4.56282555247099,\n        2.239855333359209,\n        0.8858224086234558,\n        0.2749152498516915,\n        0.065081772043891,\n        0.01140078757406651,\n        0.0014307857568059547,\n        0.00012430399576619759,\n        0.000007210093578135789,\n        2.6877776598565994e-7,\n        6.186956972097446e-9,\n      ],\n      [\n        0.24329536827804546,\n        0.7728038551557791,\n        1.7592625066245346,\n        3.2936055120464287,\n        5.3760359585668045,\n        7.859000393471332,\n        10.405404620513213,\n        12.504821155290658,\n        13.589205381195315,\n        13.247314023183272,\n        11.453882587449991,\n        8.660489869903145,\n        5.632810925650576,\n        3.0930363726789425,\n        1.4045302601533642,\n        0.5156387015601167,\n        0.1493543158978902,\n        0.03324834032211588,\n        0.00553191300824396,\n        0.0006678400288718626,\n        0.00005669907352915652,\n        0.000003275556495259113,\n        1.2439134715614264e-7,\n      ],\n      [\n        0.2372225414509372,\n        0.7356712109168281,\n        1.6550526703715214,\n        3.07996275416198,\n        5.017529396706468,\n        7.348292680583827,\n        9.787477793503268,\n        11.890850032800511,\n        13.141038833079948,\n        13.121369217200057,\n        11.72075562118748,\n        9.24971663658755,\n        6.354670717886669,\n        3.737406934439624,\n        1.847031777032451,\n        0.7515522351692535,\n        0.24629354316205715,\n        0.06348672467225328,\n        0.012551423878256474,\n        0.0018529276213141606,\n        0.00019856205079505775,\n        0.000014992476565389053,\n        7.730603844829039e-7,\n      ],\n      [\n        0.23271879824083716,\n        0.7088883082614013,\n        1.5805812562228094,\n        2.9277587515538945,\n        4.761665326629341,\n        6.981030404607598,\n        9.335864647013983,\n        11.427625720737016,\n        12.77751860003557,\n        12.97346851650865,\n        11.855195992555826,\n        9.639539921147154,\n        6.880609002514749,\n        4.2454375687486365,\n        2.225796719664239,\n        0.9730730655848,\n        0.3475778805853836,\n        0.09924305084035354,\n        0.02212824086963023,\n        0.0037586050906853095,\n        0.00047376287004662076,\n        0.00004310889117362632,\n        0.0000027508262188516493,\n      ],\n      [\n        0.22915638271884284,\n        0.6881961456155333,\n        1.5234801846597963,\n        2.811363100986145,\n        4.565786036986179,\n        6.698364922185354,\n        8.984268724172866,\n        11.05890024064881,\n        12.47400657208134,\n        12.825448105110864,\n        11.922222342548421,\n        9.914559942041778,\n        7.283644482278665,\n        4.659304316511495,\n        2.553904022191169,\n        1.1785160481519437,\n        0.44916436381393515,\n        0.1385111353260122,\n        0.0338097340257627,\n        0.0063819811677914276,\n        0.0009089216798971201,\n        0.000095166627767258,\n        0.00000712846962896474,\n      ],\n      [\n        0.22623448398881427,\n        0.6714931623353174,\n        1.477646327513417,\n        2.718124457153039,\n        4.408754236647866,\n        6.470841683718448,\n        8.698792087783241,\n        10.754498288087238,\n        12.214652518565867,\n        12.684037089000261,\n        11.95137224474386,\n        10.117195520681797,\n        7.603733371807332,\n        5.004948417194465,\n        2.841608847541183,\n        1.3685379237917168,\n        0.549029548686969,\n        0.17993099927817588,\n        0.047177739726906226,\n        0.009680027118186874,\n        0.0015183089164477156,\n        0.00017761520483249753,\n        0.000015100514611741439,\n      ],\n      [\n        0.22376195321101744,\n        0.6575725925374191,\n        1.439642454481275,\n        2.640960341081809,\n        4.278730825984661,\n        6.281854090708479,\n        8.46002687603401,\n        10.496548308808338,\n        11.988983389174601,\n        12.551112523281233,\n        11.957783898211172,\n        10.27113247124107,\n        7.8647393192650625,\n        5.299207968394105,\n        3.0966200763536733,\n        1.5444630763742075,\n        0.6461705244197234,\n        0.2225834946295651,\n        0.06188105809732565,\n        0.013593905692282316,\n        0.002307414841396261,\n        0.00029556541484765934,\n        0.00002787176272184885,\n      ],\n    ],\n  },\n  magwBin: {\n    attributes: {\n      description: 'lower bound of the bin of magw',\n      standard_name: 'lower_bin',\n      units: 'm.s-1',\n      vartype: 'f8',\n    },\n    dimensions: ['level', 'magw_bin'],\n    values: [\n      [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16,\n        17,\n        18,\n        19,\n        20,\n        21,\n        22,\n      ],\n      [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16,\n        17,\n        18,\n        19,\n        20,\n        21,\n        22,\n      ],\n      [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16,\n        17,\n        18,\n        19,\n        20,\n        21,\n        22,\n      ],\n      [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16,\n        17,\n        18,\n        19,\n        20,\n        21,\n        22,\n      ],\n      [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16,\n        17,\n        18,\n        19,\n        20,\n        21,\n        22,\n      ],\n      [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16,\n        17,\n        18,\n        19,\n        20,\n        21,\n        22,\n      ],\n      [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16,\n        17,\n        18,\n        19,\n        20,\n        21,\n        22,\n      ],\n      [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16,\n        17,\n        18,\n        19,\n        20,\n        21,\n        22,\n      ],\n      [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16,\n        17,\n        18,\n        19,\n        20,\n        21,\n        22,\n      ],\n    ],\n  },\n  success: true,\n};\n","import { fade, makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(({ palette }) => ({\n  rect: {\n    cursor: 'pointer',\n    outline: 'none',\n    '&:hover': {\n      fill: fade(palette.blue.graph, 0.6),\n    },\n  },\n}));\n","import React, { memo, useMemo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getPrettyNumber } from 'helpers/data';\nimport { ALTITUDE_TYPE, DEPTH_TYPE } from 'constants/graphs';\nimport { palette } from 'theme';\nimport { floatRound } from 'helpers/common';\n\nimport { useStyles } from './styles';\n\nconst LONG_MODE_AMOUNT = 30;\nconst BASIC_HEIGHT = 350;\nconst LONG_MODE_HEIGHT = 450;\nconst LINES_COLOR = palette.grey.light;\nconst RECT_FILL = palette.blue.graph;\nconst SELECTED_RECT_FILL = palette.blue.main;\nconst LABEL_WIDTH = 15;\nconst RECT_WIDTH = 15;\nconst FONT_SIZE_BASIC = 10;\nconst FONT_SIZE_LONG_MODE = 8;\nconst ARROW_WIDTH = 10;\nconst ARROW_HEIGHT = 14;\n\n/**\n * Renders block with level selection using svg\n * @param { array } levels - array of levels values\n * @param { string } type - select type (altitude|depth)\n * @param { number } selectedLevel - selected level index\n * @param { function } onSelect - callback, takes level index as argument\n * @param { number } width - whole bar width\n * @param { number } height - height\n * @param { number } xOffset\n * @param { number } yOffset\n * @param { number } axisOverflow - length of axis part above or below rectangles\n * @returns { JSX }\n */\nconst SvgLevelSelect = ({\n  levels,\n  type,\n  selectedLevel,\n  onSelect,\n  width,\n  height: heightFromProps,\n  xOffset,\n  yOffset,\n  axisOverflow,\n}) => {\n  const classes = useStyles();\n  const isLongMode = levels.length > LONG_MODE_AMOUNT;\n  const height = {\n    true: BASIC_HEIGHT,\n    [!!heightFromProps]: heightFromProps,\n    [!heightFromProps && isLongMode]: LONG_MODE_HEIGHT,\n  }.true;\n\n  const up = type === ALTITUDE_TYPE;\n\n  const onClickLevel = useCallback(\n    ({ currentTarget }) => {\n      const index = currentTarget.getAttribute('data-index');\n\n      if (!index) {\n        return false;\n      }\n      const levelIndex = up ? levels.length - 1 - index : index;\n      onSelect(+levelIndex);\n    },\n    [onSelect, levels, up]\n  );\n\n  const preparedLevels = useMemo(() => {\n    const roundedLevels = levels.map((level) => getPrettyNumber(level, 0));\n    return up ? roundedLevels.reverse() : roundedLevels;\n  }, [levels, up]);\n\n  const lastIndex = levels.length - 1;\n  const selectedIndex = up ? lastIndex - selectedLevel : selectedLevel;\n\n  const {\n    fullHeight,\n    labelX,\n    labelY,\n    axisX,\n    tickX,\n    rectHeight,\n    rectStartY,\n    tickFontSize,\n    arrowPath,\n    axisY1,\n    axisY2,\n  } = useMemo(() => {\n    const lineX = xOffset + LABEL_WIDTH;\n    const heightFull = height + axisOverflow;\n    const y1 = up ? heightFull : yOffset;\n    const y2 = up ? yOffset : heightFull + yOffset;\n    const arrowStartY = up ? y2 + ARROW_HEIGHT : y2 - ARROW_HEIGHT;\n\n    let pathArrow = `M${lineX - ARROW_WIDTH / 2},${arrowStartY}`;\n    pathArrow += `L${lineX + ARROW_WIDTH / 2},${arrowStartY}`;\n    pathArrow += `L${lineX},${y2}Z`;\n\n    return {\n      axisY1: y1,\n      axisY2: y2,\n      arrowPath: pathArrow,\n      fullHeight: heightFull,\n      labelX: xOffset,\n      labelY: axisOverflow + ~~(height / 2),\n      axisX: lineX,\n      tickX: lineX + RECT_WIDTH + 3,\n      rectHeight: floatRound(height / preparedLevels.length, 2),\n      rectStartY: up ? axisOverflow : yOffset,\n      tickFontSize: isLongMode ? FONT_SIZE_LONG_MODE : FONT_SIZE_BASIC,\n    };\n  }, [height, axisOverflow, yOffset, xOffset, preparedLevels, up, isLongMode]);\n\n  return (\n    <svg width={width} height={fullHeight}>\n      <text\n        x={labelX}\n        y={labelY}\n        fill={LINES_COLOR}\n        textAnchor=\"middle\"\n        dominantBaseline=\"middle\"\n        transform={`rotate(-90, ${labelX}, ${labelY})`}\n      >{`Choose your ${type} (m)`}</text>\n      <line\n        stroke={LINES_COLOR}\n        x1={axisX}\n        y1={axisY1}\n        x2={axisX}\n        y2={axisY2}\n        strokeWidth=\"1\"\n      />\n      <path d={arrowPath} fill={LINES_COLOR} stroke={LINES_COLOR} />\n      {preparedLevels.map((level, index) => {\n        const rectY = rectStartY + index * rectHeight;\n\n        return (\n          <React.Fragment key={level}>\n            <rect\n              x={axisX}\n              y={rectStartY + index * rectHeight}\n              width={RECT_WIDTH}\n              height={rectHeight}\n              data-index={index}\n              fill={index === selectedIndex ? SELECTED_RECT_FILL : RECT_FILL}\n              stroke=\"black\"\n              className={classes.rect}\n              onClick={onClickLevel}\n              tabIndex=\"0\"\n              aria-label=\"select-level\"\n              role=\"button\"\n            />\n            <text\n              x={tickX}\n              y={rectY + 2}\n              fontSize={tickFontSize}\n              textAnchor=\"start\"\n              dominantBaseline=\"hanging\"\n            >\n              {level}\n            </text>\n          </React.Fragment>\n        );\n      })}\n    </svg>\n  );\n};\n\nSvgLevelSelect.propTypes = {\n  type: PropTypes.oneOf([ALTITUDE_TYPE, DEPTH_TYPE]).isRequired,\n  levels: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  ).isRequired,\n  selectedLevel: PropTypes.number,\n  onSelect: PropTypes.func.isRequired,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  xOffset: PropTypes.number,\n  yOffset: PropTypes.number,\n};\n\nSvgLevelSelect.defaultProps = {\n  xOffset: 0,\n  yOffset: 0,\n  selectedLevel: 0,\n};\n\nexport default memo(SvgLevelSelect);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { DEFAULT_AXIS_INDEX } from 'constants/graphs';\nimport SvgLevelSelect from 'components/SvgLevelSelect';\n\n/**\n * Decorator for SvgLevelSelect, helps to use it with recharts `Customized` component\n * @note can be used with both polar (like pie chart) and biaxial (like bar chart) components\n * @param { string } type\n * @param { array } levels\n * @param { number } barWidth\n * @param { object } yAxisMap\n * @param { object } margin\n * @param { number } selectedLevel\n * @param { function } onSelect\n * @param { number } xOffset\n * @param { number } cx\n * @param { number } cy\n * @param { number } outerRadius\n * @returns { JSX }\n */\nconst CustomLevelsBar = ({\n  type,\n  levels,\n  barWidth,\n  yAxisMap,\n  selectedLevel,\n  onSelect,\n  xOffset,\n  outerRadius,\n  margin,\n  cx,\n  cy,\n}) => {\n  const isPolarCoords = outerRadius && (cx ?? false) && (cy ?? false);\n  const yStart = isPolarCoords\n    ? (margin.top ?? 0) + cy - outerRadius\n    : yAxisMap?.[DEFAULT_AXIS_INDEX]?.y;\n  const height = isPolarCoords\n    ? outerRadius * 2\n    : yAxisMap?.[DEFAULT_AXIS_INDEX]?.height;\n\n  return (\n    <SvgLevelSelect\n      type={type}\n      axisOverflow={yStart}\n      yOffset={2}\n      xOffset={xOffset}\n      width={barWidth}\n      height={height}\n      levels={levels}\n      selectedLevel={selectedLevel}\n      onSelect={onSelect}\n    />\n  );\n};\n\nCustomLevelsBar.propTypes = {\n  type: PropTypes.string,\n  levels: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  ).isRequired,\n  barWidth: PropTypes.number,\n  yAxisMap: PropTypes.object,\n  selectedLevel: PropTypes.number,\n  onSelect: PropTypes.func,\n  xOffset: PropTypes.number,\n  cx: PropTypes.number,\n  cy: PropTypes.number,\n  margin: PropTypes.object,\n  outerRadius: PropTypes.number,\n};\n\nexport default CustomLevelsBar;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nconst TEXT_DY_BIG = 1.8;\nconst TEXT_DY_SMALL = 1.2;\n\n/**\n * Svg Parameters block\n * @param { number } width\n * @param { number } fontSize\n * @param { array } parameters\n * @param { number } offsetY\n * @returns { JSX }\n */\nconst SvgParametersBlock = ({ width, fontSize, parameters, offsetY }) => {\n  const height =\n    (TEXT_DY_BIG + TEXT_DY_SMALL) * fontSize * (parameters.length + 1) +\n    offsetY * 2;\n\n  return (\n    <svg width={width} height={height}>\n      <text y={0} fontSize={fontSize}>\n        <tspan x={0} dy={`${TEXT_DY_SMALL}em`} fontWeight=\"bold\">\n          Parameters\n        </tspan>\n        {parameters.map(({ name, value }) => (\n          <React.Fragment key={name}>\n            <tspan x={0} dy={`${TEXT_DY_BIG}em`}>\n              {name}:\n            </tspan>\n            <tspan x={0} dy={`${TEXT_DY_SMALL}em`}>\n              {value}\n            </tspan>\n          </React.Fragment>\n        ))}\n      </text>\n    </svg>\n  );\n};\n\nSvgParametersBlock.propTypes = {\n  width: PropTypes.number.isRequired,\n  fontSize: PropTypes.number,\n  parameters: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    })\n  ).isRequired,\n  offsetY: PropTypes.number,\n};\n\nSvgParametersBlock.defaultProps = {\n  fontSize: 12,\n  offsetY: 10,\n};\n\nexport default memo(SvgParametersBlock);\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport SvgParametersBlock from 'components/SvgParametersBlock';\nimport { DEFAULT_AXIS_INDEX } from 'constants/graphs';\n\nconst Y_OFFSET = 10;\n\n/**\n * Custom parameters block component.\n * Decorator for SvgParametersBlock, helps to use it with recharts as `Customized` component\n * @param { object } xAxisMap\n * @param { object } yAxisMap\n * @param { number } blockWidth\n * @param { number } leftOffset\n * @param { array } parameters\n * @param { number } fontSize\n * @returns { JSX }\n * @see SvgParametersBlock\n */\nconst CustomParametersBlock = ({\n  xAxisMap,\n  yAxisMap,\n  blockWidth,\n  leftOffset,\n  parameters,\n  fontSize,\n}) => {\n  const { x: xAxisStart, width: canvasWidth } = xAxisMap[DEFAULT_AXIS_INDEX];\n  const { y: yAxisStart, height } = yAxisMap[DEFAULT_AXIS_INDEX];\n  const x = xAxisStart + canvasWidth + leftOffset;\n\n  return (\n    <svg x={x} y={yAxisStart} width={blockWidth} height={height}>\n      <SvgParametersBlock\n        width={blockWidth}\n        parameters={parameters}\n        offsetY={Y_OFFSET}\n        fontSize={fontSize}\n      />\n    </svg>\n  );\n};\n\nCustomParametersBlock.propTypes = {\n  blockWidth: PropTypes.number,\n  xAxisMap: PropTypes.object,\n  yAxisMap: PropTypes.object,\n  leftOffset: PropTypes.number,\n  parameters: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    })\n  ).isRequired,\n  fontSize: PropTypes.number,\n};\n\nCustomParametersBlock.defaultProps = {\n  blockWidth: 120,\n  leftOffset: 20,\n  fontSize: 12,\n};\n\nexport default CustomParametersBlock;\n","import { useCallback, useState, useMemo } from 'react';\n\nimport {\n  SELECT_MODE,\n  SELECT_RANGE_MODE,\n  SELECTED_RANGE_MODE,\n} from 'constants/graphs';\nimport { cyclicSequence } from 'helpers/common';\n\nconst INITIAL_RANGE = {\n  start: null,\n  end: null,\n};\n\n// mode sequence in correct order to iterate\nconst MODE_SEQUENCE = [SELECT_MODE, SELECT_RANGE_MODE, SELECTED_RANGE_MODE];\n\n/**\n * Hook to use with range select component. 3 basic modes: before selection, in process, when selection is completed\n * @note each selection item should contain `data-index` attribute\n * @note hook provides 2 arguments for callbacks - original event and current selection mode\n * provides handlers to use with your selection coponent:\n *   `handleClick` and `handleEnter` should be passed to selection items handlers\n *   `handleRangeLeave` can be passed to selection items wrappers handler\n * @param {function(event, mode): *} onClick - on item click callback (passed mode arg is new mode after click)\n * @param {function(event, mode): *} onEnter - on item enter callback\n * @param {function(event, mode): *} onRangeLeave - on range component leave callback\n * @returns {{\n *   mode: string,\n *   handleEnter: function,\n *   handleClick: function,\n *   range: { start, end },\n *   handleRangeLeave: function,\n *}}\n */\nexport const useRangeSelect = ({\n  onClick = null,\n  onEnter = null,\n  onRangeLeave = null,\n} = {}) => {\n  const [range, setRange] = useState(INITIAL_RANGE);\n  const nextMode = useMemo(() => cyclicSequence(MODE_SEQUENCE), []);\n  const [mode, setMode] = useState(() => nextMode());\n\n  const onItemEnter = (event) => {\n    const index = +event.currentTarget.getAttribute('data-index');\n\n    if (mode !== SELECTED_RANGE_MODE) {\n      setRange(({ start }) =>\n        mode === SELECT_MODE\n          ? { start: index, end: index }\n          : { start, end: index }\n      );\n    }\n\n    return onEnter && onEnter(event, mode);\n  };\n\n  const onItemClick = (event) => {\n    const index = +event.currentTarget.getAttribute('data-index');\n    const newMode = nextMode();\n\n    setRange(({ start }) =>\n      newMode === SELECTED_RANGE_MODE\n        ? { start, end: index }\n        : { start: index, end: index }\n    );\n    setMode(newMode);\n\n    return onClick && onClick(event, newMode);\n  };\n\n  const onLeave = (event) => {\n    if (mode === SELECT_MODE) {\n      setRange(INITIAL_RANGE);\n    }\n    return onRangeLeave && onRangeLeave(event, mode);\n  };\n\n  return {\n    mode,\n    range,\n    handleEnter: useCallback(onItemEnter, [setRange, mode, onEnter]),\n    handleClick: useCallback(onItemClick, [setRange, setMode, onClick]),\n    handleRangeLeave: useCallback(onLeave, [mode, onRangeLeave]),\n  };\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { palette } from 'theme';\nimport { BOTTOM, LEFT, RIGHT, TOP } from 'constants/common';\n\nconst LINE_HEIGHT_FACTOR = 1.2;\nconst FIRST_LINE_OFFSET = '0.6em';\nconst COMMON_LINE_OFFSET = '1.2em';\nconst WIDE_LETTER_SPACING = 1.5;\n\n/**\n * SVG tooltip (If you have possibility not to use svg, don't use it)\n * Useful for some cases, when built-in or custom div-based tooltips are slow or cannot be used at all\n * @param { number } x - tooltip x\n * @param { number } y - tooltip y\n * @param { { text: string, bold: bool, wide: bool }[] } lines - tooltip text as collection of lines objects\n * @param {{ x: number, y: number }} limits - limits for tooltips to not exceed\n * @param {{ x: number, y: number }} offset - offset from base x, y coordinates\n * @param { number } padding - common text padding value\n * @param { number } fontSize - font size\n * @param { * } widthUpdater - prop to control width calculation ('' by default to not recalculate for each render)\n * @param { number } fillOpacity - fill opacity\n * @param {{ x: string, y: string }} defaultPosition - default position relative to given x,y (right bottom by default)\n * @returns { JSX }\n */\nconst SvgTooltip = ({\n  x,\n  y,\n  lines,\n  limits,\n  offset,\n  padding,\n  fontSize,\n  widthUpdater,\n  fillOpacity,\n  defaultPosition,\n}) => {\n  const textRef = useRef(null);\n  const [containerWidth, setContainerWidth] = useState(0);\n\n  useEffect(() => {\n    let maxLineWidth = 0;\n    textRef.current.childNodes.forEach((node) => {\n      const currentWidth = node.getComputedTextLength();\n      maxLineWidth = currentWidth > maxLineWidth ? currentWidth : maxLineWidth;\n    });\n    setContainerWidth(maxLineWidth + padding * 2);\n    // eslint-disable-next-line\n  }, [widthUpdater, setContainerWidth]);\n\n  const containerHeight = (LINE_HEIGHT_FACTOR * lines.length + 1) * fontSize;\n  const maxX = x + offset.x + containerWidth;\n  const maxY = y + offset.y + containerHeight;\n  const xPosition = limits && maxX > limits.x ? LEFT : defaultPosition.x;\n  const yPosition = limits && maxY > limits.y ? TOP : defaultPosition.y;\n  const containerX =\n    xPosition === RIGHT ? x + offset.x : x - (containerWidth + offset.x);\n  const containerY =\n    yPosition === BOTTOM ? y + offset.y : y - (containerHeight + offset.y);\n  const textX = containerX + padding;\n  const textY = containerY + padding;\n\n  return (\n    <g>\n      {containerWidth && (\n        <rect\n          x={containerX}\n          y={containerY}\n          fill={palette.black.main}\n          fillOpacity={fillOpacity}\n          height={containerHeight}\n          width={containerWidth}\n          rx={3}\n          ry={3}\n        />\n      )}\n      <text\n        y={textY}\n        ref={textRef}\n        fill={palette.lightGrey.main}\n        fontSize={fontSize}\n        textLength=\"90%\"\n      >\n        {lines.map(({ text, bold, wide }, index) => (\n          <tspan\n            key={text}\n            x={textX}\n            dy={index === 0 ? FIRST_LINE_OFFSET : COMMON_LINE_OFFSET}\n            fontWeight={bold ? 'bold' : 'normal'}\n            letterSpacing={wide ? WIDE_LETTER_SPACING : 'normal'}\n          >\n            {text}\n          </tspan>\n        ))}\n      </text>\n    </g>\n  );\n};\n\nconst coordinatesShape = {\n  x: PropTypes.number,\n  y: PropTypes.number,\n};\n\nSvgTooltip.propTypes = {\n  lines: PropTypes.arrayOf(\n    PropTypes.shape({\n      text: PropTypes.string.isRequired,\n      bold: PropTypes.bool,\n    })\n  ),\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired,\n  defaultPosition: PropTypes.shape({\n    x: PropTypes.oneOf([LEFT, RIGHT]),\n    y: PropTypes.oneOf([TOP, BOTTOM]),\n  }),\n  padding: PropTypes.number,\n  fontSize: PropTypes.number,\n  fillOpacity: PropTypes.number,\n  widthUpdater: PropTypes.any,\n  offset: PropTypes.shape(coordinatesShape),\n  limits: PropTypes.shape(coordinatesShape),\n};\n\nSvgTooltip.defaultProps = {\n  limits: null,\n  lines: [],\n  offset: { x: 0, y: 30 },\n  padding: 10,\n  fontSize: 14,\n  fillOpacity: 0.7,\n  widthUpdater: '',\n  defaultPosition: {\n    x: RIGHT,\n    y: BOTTOM,\n  },\n};\n\nexport default React.memo(SvgTooltip);\n","export const DOM_EVENT = 'domEvent';\nexport const CUSTOM_EVENT = 'customEvent';\n\nexport const EMPTY_VALUE = {};\nexport const EMPTY_ARRAY = [];\nexport const EMPTY_FUNCTION = () => null;\nexport const EOL = '\\r\\n';\n\nexport const STATUS_SUCCESS = 'success';\nexport const STATUS_ERROR = 'error';\nexport const STATUS_LOADING = 'loading';\nexport const STATUS_NOT_REQUESTED = 'notRequested';\nexport const STATUS_PENDING = 'pending';\n\nexport const AUTH_TOKEN_KEY = 'authToken';\nexport const SETTINGS_KEY = 'settings';\n\nexport const MONTH_NAMES = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n];\n\nexport const MANAGER_ROLE = 'manager';\nexport const USER_ROLE = 'user';\n\nexport const ASC = 'ascending';\nexport const DESC = 'descending';\n\nexport const TOP = 'top';\nexport const LEFT = 'left';\nexport const RIGHT = 'right';\nexport const BOTTOM = 'bottom';\n\nexport const DATE_FORMATS = {\n  shortMonthFormat: 'yyyy MMM d',\n  digitsFormat: 'MM/dd/yyyy',\n  longFormat: \"MMMM d yyyy 'at' HH:mm\",\n  yFormat: 'yyyy',\n  ymFormat: 'yyyy/MM',\n  ymdFormat: 'yyyy/MM/dd',\n  ymdhmFormat: 'yyyy/MM/dd HH:mm',\n  commonFormat: 'yyyy-MM-dd',\n};\n\nexport const CARDINAL_POINTS = {\n  N: 'N',\n  NE: 'N-E',\n  ES: 'E-S',\n  S: 'S',\n  SW: 'S-W',\n  E: 'E',\n  WN: 'W-N',\n  W: 'W',\n};\n\nexport const CARDINAL_BY_ANGLE = {\n  0: CARDINAL_POINTS.N,\n  45: CARDINAL_POINTS.NE,\n  90: CARDINAL_POINTS.E,\n  135: CARDINAL_POINTS.ES,\n  180: CARDINAL_POINTS.S,\n  225: CARDINAL_POINTS.SW,\n  270: CARDINAL_POINTS.W,\n  315: CARDINAL_POINTS.WN,\n};\n\nexport const CARDINAL_ANGLES = [0, 45, 90, 135, 180, 225, 270, 315];\n\nexport const TRANSITION_TIMEOUT = 500;\n\nexport const SHORT_TIME_UNITS = {\n  hours: 'h',\n  minutes: 'mn',\n  seconds: 'ss',\n};\n\nexport const TIMESTAMPS = {\n  hour: 3600,\n  day: 3600 * 24,\n  year: 3600 * 24 * 365.24,\n};\n\nexport const ERA_START_MOMENT_DATE_STRING = '0001-01-01T00:00:00+00:00';\n\nexport const ZIP_FILE_TYPE = 'application/zip';\nexport const OCTET_STREAM_FILE_TYPE = 'application/octet-stream';\n","import React, { useCallback, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport {\n  APD_HINT_BY_MODE,\n  DEFAULT_AXIS_INDEX,\n  SELECT_MODE,\n  SELECT_RANGE_MODE,\n  SELECTED_RANGE_MODE,\n} from 'constants/graphs';\nimport { useRangeSelect } from 'hooks/useRangeSelect';\nimport { getAscendingRange, inRange } from 'helpers/common';\nimport { getPrettyNumber } from 'helpers/data';\nimport { palette } from 'theme';\n\nimport SvgTooltip from '../SvgTooltip';\n\nconst LIMITS_OFFSET = 5;\nconst BAND_FILL = palette.blue.main;\nconst BAND_STROKE = palette.lightGrey.main;\n\n/**\n * returns range text for tooltip\n * @param from\n * @param to\n * @param units\n * @returns {string}\n */\nconst getRangeTextForTooltip = ({ from, to, units }) =>\n  to\n    ? `[${getPrettyNumber(from)}${units} - ${getPrettyNumber(to)}${units}]`\n    : `>= ${getPrettyNumber(from)}${units}`;\n\n/**\n * returns occurrence value by range. (sum of range occurrences)\n * @param { number } start - start range index\n * @param { number } end - end range index\n * @param { [{ yValue: number }, ...] } data - graph data collection\n * @returns { number }\n */\nconst getOccurrenceByRange = ({ start, end, data }) => {\n  if (start !== null && start === end) {\n    return data[start].yValue;\n  }\n  let occurence = 0;\n  for (let index = start; index <= end; index += 1) {\n    const item = data[index];\n    occurence += item ? item.yValue : 0;\n  }\n\n  return getPrettyNumber(occurence);\n};\n\n/**\n * Customized bar chart with range selection. Uses own svg tooltip\n * Created to avoid extra rerendering (Grid, Axises and chart rerender seems to be very expensive)\n * @param { object } classes\n * @param {{ xAxisId: { width, x } }} xAxisMap - x axis parameters\n * @param { [{ height, niceTicks, padding }] } yAxisMap - y axis parameters\n * @param { array } orderedTooltipTicks - x tick coordinates provided by recharts\n * @param { number } tooltipAxisBandSize - bar band width\n * @param { React.ElementRef } graphContainer - graph element ref, helps to count relative x, y\n * @param { string } tooltipTitle - title for tooltip\n * @param { object } margin - graph margin\n * @param { string } xUnits - x asis units\n * @param { array } data - graph data collection\n * @returns { JSX }\n */\nconst BarChartWithRangeSelection = ({\n  classes,\n  xAxisMap,\n  yAxisMap,\n  orderedTooltipTicks,\n  tooltipAxisBandSize,\n  graphContainer,\n  tooltipTitle,\n  margin,\n  xUnits,\n  data,\n}) => {\n  const [tooltipY, setTooltipY] = useState(null);\n\n  const updateTooltipY = useCallback(\n    (event, mode) => {\n      if (mode !== SELECT_MODE) {\n        return;\n      }\n      const { container: graphElement } = graphContainer.current;\n      const { y: graphY } = graphElement.getBoundingClientRect();\n      setTooltipY(event.clientY - graphY);\n    },\n    [setTooltipY, graphContainer]\n  );\n\n  const {\n    handleEnter,\n    handleClick,\n    handleRangeLeave,\n    mode,\n    range,\n  } = useRangeSelect({\n    onEnter: updateTooltipY,\n  });\n\n  const {\n    fullHeight,\n    bandWidth,\n    scaleDivision,\n    tooltipLimits,\n  } = useMemo(() => {\n    const {\n      height: yAxisHeight,\n      niceTicks: yTickValues,\n      padding = {},\n    } = yAxisMap[DEFAULT_AXIS_INDEX];\n    const { width: xAxisWidth, x: xOffset } = xAxisMap[DEFAULT_AXIS_INDEX];\n    const yMaxTickHeight = yAxisHeight - (padding.top || 0);\n    const yMaxTickValue = yTickValues[yTickValues.length - 1];\n    const containerHeight = (margin.top || 0) + yAxisHeight;\n    const containerWidth = xOffset + xAxisWidth;\n\n    return {\n      fullHeight: containerHeight,\n      scaleDivision: yMaxTickHeight / yMaxTickValue,\n      bandWidth: Math.floor(tooltipAxisBandSize),\n      tooltipLimits: {\n        y: containerHeight - LIMITS_OFFSET,\n        x: containerWidth - LIMITS_OFFSET,\n      },\n    };\n  }, [xAxisMap, yAxisMap, margin, tooltipAxisBandSize]);\n\n  const isSelectMode = mode === SELECT_MODE;\n  const { start, end } = getAscendingRange(range.start, range.end);\n  const showTooltip = start !== null && end !== null;\n\n  const { xValue: from } = showTooltip ? data[start] ?? {} : {};\n  const { xValue: to } = showTooltip ? data[end + 1] ?? {} : {};\n  const occurrence = showTooltip\n    ? getOccurrenceByRange({ start, end, data })\n    : null;\n\n  const { coordinate: tooltipX } = showTooltip\n    ? orderedTooltipTicks[start]\n    : {};\n\n  const lines = showTooltip\n    ? [\n        { text: tooltipTitle, bold: true },\n        { text: getRangeTextForTooltip({ from, to, units: xUnits }) },\n        { text: `Occurrence: ${getPrettyNumber(occurrence)}%`, bold: true },\n        { text: APD_HINT_BY_MODE[mode] },\n      ]\n    : [];\n\n  return (\n    <g>\n      <g onMouseLeave={handleRangeLeave}>\n        {orderedTooltipTicks.map(({ coordinate }, index) => {\n          const x = coordinate;\n          const { yValue } = data[index];\n          const height = yValue * scaleDivision;\n          const indexInRange = !isSelectMode\n            ? inRange(index, start, end)\n            : false;\n          const rectangleClass = classNames(classes.band, {\n            [classes.hoverable]: isSelectMode,\n            [classes.selectRange]: indexInRange && mode === SELECT_RANGE_MODE,\n            [classes.selectedRange]:\n              indexInRange && mode === SELECTED_RANGE_MODE,\n          });\n\n          return (\n            <rect\n              x={x}\n              y={fullHeight - height}\n              fill={BAND_FILL}\n              stroke={BAND_STROKE}\n              key={x}\n              width={bandWidth}\n              height={height}\n              data-index={index}\n              onClick={handleClick}\n              onMouseEnter={handleEnter}\n              className={rectangleClass}\n            />\n          );\n        })}\n      </g>\n      {showTooltip && (\n        <SvgTooltip\n          lines={lines}\n          x={tooltipX}\n          y={tooltipY}\n          widthUpdater={mode}\n          limits={tooltipLimits}\n        />\n      )}\n    </g>\n  );\n};\n\nBarChartWithRangeSelection.propTypes = {\n  classes: PropTypes.object,\n  xAxisMap: PropTypes.object,\n  yAxisMap: PropTypes.object,\n  orderedTooltipTicks: PropTypes.array,\n  tooltipAxisBandSize: PropTypes.number,\n  graphContainer: PropTypes.shape({ current: PropTypes.any }),\n  tooltipTitle: PropTypes.string,\n  margin: PropTypes.object,\n  xUnits: PropTypes.string,\n  data: PropTypes.array,\n};\n\nexport default BarChartWithRangeSelection;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(({ palette }) => ({\n  title: {\n    margin: '5px 25px',\n    whiteSpace: 'pre-wrap',\n  },\n  graphWrapper: {\n    zIndex: 1,\n  },\n  paramsContainer: {\n    marginLeft: 20,\n  },\n  graphContainer: {\n    '& svg': {\n      overflow: 'visible',\n    },\n  },\n  band: {\n    fill: palette.blue.main,\n    stroke: palette.lightGrey.main,\n    '&$selectRange': {\n      fill: palette.blue.dark,\n    },\n    '&$selectedRange': {\n      fill: palette.blue.dark,\n    },\n    '&$hoverable': {\n      '&:hover': {\n        fill: palette.blue.dark,\n      },\n    },\n  },\n  hoverable: {},\n  selectRange: {},\n  selectedRange: {},\n}));\n","import React, { useState, useMemo, useRef } from 'react';\nimport { Grid } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { range as lodashRange } from 'lodash';\nimport { BarChart, CartesianGrid, Customized, XAxis, YAxis } from 'recharts';\nimport Typography from '@material-ui/core/Typography';\n\nimport CustomLevelsBar from 'components/CustomLevelsBar';\nimport {\n  CHART_SVG_ID,\n  CHART_TITLE_ID,\n  DEFAULT_LEVELS_BAR_WIDTH,\n} from 'constants/graphs';\nimport CustomParametersBlock from 'components/CustomParametersBlock';\nimport { useUniqueId } from 'hooks/useUniqueId';\n\nimport BarChartWithRangeSelection from '../BarChartWithRangeSelection';\n\nimport { useStyles } from './styles';\n\nconst LEVELS_BAR_OFFSET = 10;\n\nconst PARAMETERS_WIDTH = 120;\nconst PARAMETERS_OFFSET = 10;\nconst PARAMETERS_FULL_WIDTH = PARAMETERS_WIDTH + PARAMETERS_OFFSET;\n\nconst CANVAS_OFFSET = 30;\nconst GRAPH_MARGIN = {\n  left: CANVAS_OFFSET / 2,\n  right: CANVAS_OFFSET / 2 + PARAMETERS_FULL_WIDTH,\n  top: CANVAS_OFFSET,\n  bottom: CANVAS_OFFSET,\n};\n\n/**\n * AnalyticalProbabilityDistribution component. Renders Analytical Probability Distribution graph for given data\n * @param { object[] } annualData - graph annual Data in array (by levels)\n * @param { number } graphWidth width of graph\n * @param { number } yTickStep number between two ticks in y axis\n * @param { number } projectId - current project id\n * @param { Array } statsIds - array of current graphs stats ids\n * @param { string } pngFileName - file name for saving as png\n * @returns { JSX }\n */\nconst AnalyticalProbabilityDistribution = ({\n  annualData,\n  graphWidth,\n  yTickStep,\n  projectId,\n  statsIds,\n  pngFileName,\n}) => {\n  const salt = useUniqueId();\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const classes = useStyles();\n  const graphContainer = useRef(null);\n  const graphHeight = graphWidth * 0.8;\n\n  const {\n    data,\n    title,\n    yTicks,\n    xUnits,\n    extraParams,\n    maxYValue,\n    yLabel,\n    xLabel,\n    levels,\n    tooltipTitle,\n    withLevelsSelect,\n  } = useMemo(() => {\n    const hasLevels = Array.isArray(annualData) && !!annualData[0].levels;\n    const currentData = hasLevels ? annualData[currentLevel] : annualData;\n    return {\n      ...currentData,\n      withLevelsSelect: hasLevels,\n      yTicks: lodashRange(\n        Math.floor(currentData.minYValue),\n        currentData.maxYValue,\n        yTickStep\n      ),\n    };\n  }, [annualData, yTickStep, currentLevel]);\n\n  const chartMargin = withLevelsSelect\n    ? { ...GRAPH_MARGIN, left: DEFAULT_LEVELS_BAR_WIDTH }\n    : GRAPH_MARGIN;\n  const chartWidth = graphWidth + chartMargin.left + chartMargin.right;\n  const chartHeight = graphHeight + GRAPH_MARGIN.top + GRAPH_MARGIN.bottom;\n\n  return (\n    <Grid justify=\"center\" container>\n      <Grid item>\n        <Typography\n          id={CHART_TITLE_ID + salt}\n          className={classes.title}\n          variant=\"subtitle1\"\n          align=\"center\"\n        >\n          {title}\n        </Typography>\n        <Grid justify=\"center\" container>\n          <Grid item className={classes.graphWrapper}>\n            <BarChart\n              id={CHART_SVG_ID + salt}\n              ref={graphContainer}\n              data={data}\n              width={chartWidth}\n              height={chartHeight}\n              margin={chartMargin}\n              barCategoryGap={0}\n              className={classes.graphContainer}\n            >\n              <XAxis\n                tick={{ fontSize: 9 }}\n                label={{ value: xLabel, position: 'bottom', offset: -10 }}\n              />\n              <YAxis\n                ticks={yTicks}\n                domain={[0, maxYValue]}\n                tick={{\n                  fontSize: 9,\n                }}\n                label={{\n                  value: yLabel,\n                  angle: -90,\n                  position: 'center',\n                  offset: 0,\n                }}\n              />\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <Customized\n                key={1}\n                xUnits={xUnits}\n                data={data}\n                tooltipTitle={tooltipTitle}\n                graphContainer={graphContainer}\n                component={BarChartWithRangeSelection}\n                classes={classes}\n              />\n              {withLevelsSelect && (\n                <Customized\n                  key={2}\n                  levels={levels.values}\n                  type={levels.type}\n                  barWidth={DEFAULT_LEVELS_BAR_WIDTH}\n                  selectedLevel={currentLevel}\n                  onSelect={setCurrentLevel}\n                  xOffset={LEVELS_BAR_OFFSET}\n                  component={CustomLevelsBar}\n                />\n              )}\n              <Customized\n                key={3}\n                component={CustomParametersBlock}\n                leftOffset={PARAMETERS_OFFSET}\n                blockWidth={PARAMETERS_WIDTH}\n                parameters={extraParams}\n              />\n            </BarChart>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst graphDataShape = {\n  levels: PropTypes.shape({\n    type: PropTypes.string,\n    values: PropTypes.arrayOf(PropTypes.number).isRequired,\n  }).isRequired,\n  xUnits: PropTypes.string.isRequired,\n  xLabel: PropTypes.string.isRequired,\n  yLabel: PropTypes.string.isRequired,\n  minYValue: PropTypes.number.isRequired,\n  maxYValue: PropTypes.number.isRequired,\n  tooltipTitle: PropTypes.string,\n  title: PropTypes.string,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      xValue: PropTypes.number.isRequired,\n      yValue: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n  extraParams: PropTypes.arrayOf(\n    PropTypes.shape({\n      key: PropTypes.string,\n      title: PropTypes.string,\n      value: PropTypes.any,\n    })\n  ).isRequired,\n};\n\nAnalyticalProbabilityDistribution.propTypes = {\n  annualData: PropTypes.arrayOf(PropTypes.shape(graphDataShape)),\n  graphWidth: PropTypes.number,\n  yTickStep: PropTypes.number,\n  projectId: PropTypes.number,\n  statsIds: PropTypes.array,\n  pngFileName: PropTypes.string,\n};\n\nAnalyticalProbabilityDistribution.defaultProps = {\n  yTickStep: 1,\n  graphWidth: 500,\n};\n\nexport default AnalyticalProbabilityDistribution;\n","import uniqueId from 'lodash/uniqueId';\nimport { useMemo } from 'react';\n\n/**\n * returns constant during component lifetime unique id\n * @returns {string}\n */\nexport const useUniqueId = () => useMemo(() => `${uniqueId()}`, []);\n","import React from 'react';\nimport './App.css';\nimport ApdOld from 'components/ApdOld';\nimport {analyticalProbabilityDistributionGraphData} from \"mocks/apd\";\nimport AnalyticalProbabilityDistribution from \"components/AnalyticalProbabilityDistribution\";\nimport {getPreparedAnalyticalProbabilityGraphData} from \"helpers/apd\";\n\nconst annualApdData = getPreparedAnalyticalProbabilityGraphData(\n  analyticalProbabilityDistributionGraphData\n);\n\nfunction App() {\n  return (\n    <div className=\"App App-header\">\n      <header>\n        Charts optimization\n      </header>\n      <br />\n      <div className=\"charts\">\n        <h3>Before</h3>\n        <ApdOld graphData={analyticalProbabilityDistributionGraphData} />\n        <br />\n        <h3>After</h3>\n        <AnalyticalProbabilityDistribution annualData={annualApdData} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import {INVALID_LEVEL_TYPE} from 'constants/errors'\nimport {\n  WIND_STATS_ID_PATTERN,\n  ALTITUDE_TYPE,\n  DEPTH_TYPE,\n  STATS_API_UNITS_TO_COMMON_UNITS,\n  RAW_DATA_TITLE_PATH\n} from \"constants/graphs\";\nimport {getPrettyNumber} from \"helpers/data\";\nimport {get} from \"lodash\";\nimport {STATS_TEMPLATE_VARIABLE_REGEXP} from \"constants/regexp\";\n\n/**\n * returns type for levels selector depends on stats id\n * @param statsId\n * @returns {string}\n */\nexport const getLevelsTypeByStatsId = (statsId) =>\n  statsId.substring(0, 3) === WIND_STATS_ID_PATTERN\n    ? ALTITUDE_TYPE\n    : DEPTH_TYPE;\n\n/**\n * get title addition with current level value based on level type\n * @param { string } levelType\n * @param { number } value\n * @returns { string }\n */\nexport const getTitleAdditionByLevelType = (levelType, value) => {\n  if (![ALTITUDE_TYPE, DEPTH_TYPE].includes(levelType)) {\n    throw Error(INVALID_LEVEL_TYPE);\n  }\n  if (levelType === DEPTH_TYPE && +value === 0) {\n    return 'Surface';\n  }\n  const ucFirstLevelType = `${levelType[0].toUpperCase()}${levelType.slice(1)}`;\n  const preparedString = `${ucFirstLevelType} = ${getPrettyNumber(value, 1)} m`;\n  return levelType === ALTITUDE_TYPE\n    ? `${preparedString} from sea level`\n    : preparedString;\n};\n\n/**\n * returns prepared units from statistics api\n * @param { string } units\n * @returns { string }\n */\nexport const getPreparedUnits = (units) =>\n  STATS_API_UNITS_TO_COMMON_UNITS[units] || units;\n\n/**\n * returns prepared title (template variables and extra spaces trimmed) from graph data\n * @param rawGraphData\n * @returns { string }\n */\nexport const getTitleFromRawGraphData = (rawGraphData) => {\n  const title = get(rawGraphData, RAW_DATA_TITLE_PATH, '').replace(\n    STATS_TEMPLATE_VARIABLE_REGEXP,\n    ''\n  );\n  return title.trim();\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { theme } from \"theme\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}